{"version":3,"sources":["webpack:///src/app/games/dots/dots.component.ts","webpack:///src/app/games/dots/dots.module.ts","webpack:///src/app/games/dots/dots-routing.module.ts","webpack:///src/app/games/dots/objects/dot.ts","webpack:///src/app/games/dots/objects/board.ts","webpack:///src/app/games/dots/objects/player.ts","webpack:///src/app/games/dots/dots.component.html"],"names":["DotsComponent","DotsModule","DotsRoutingModule","Dot","state","this","fromDirection","dot","toLocaleLowerCase","connections","north","east","south","west","x","y","column","row","id","radius","evt","startingDot","endingMove","startingMove","calculateDotClicked","getAvailableNeighbors","dotWasClicked","squareCount","totalSquaresLeft","makeConnections","changePlayer","endingDot","currentPlayer","players","clientY","clientX","xIdx","Math","floor","width","columns","yIdx","height","rows","closestDot","dots","get","currentNeighbors","dy","dx","sqrt","direction","neighbors","addConnection","detectFullSquare","checkLeftSquare","checkRightSquare","checkTopSquare","checkBottomSquare","squares","push","rowSpacing","columnSpacing","topPadding","sidePadding","Map","dotBuilder","set","Player","order","color","name","routes","path","component","highlightRadius","ctx","canvas","nativeElement","getContext","setCanvasDimensions","board","boardBuilder","buildPlayers","draw","innerWidth","innerHeight","playerBuilder","handleClick","highlightClickedDot","highlightNeighbors","clearRect","strokeStyle","lineWidth","strokeRect","clearCanvas","drawPlayerBorder","drawDots","fillSquares","forEach","drawDot","drawConnections","highlight","fillStyle","beginPath","arc","PI","fill","moveTo","lineTo","stroke","player","fillRect","point","fillSquare","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { Board } from './objects/board';\nimport { Dot } from './objects/dot';\nimport { Player } from './objects/player';\n\n@Component({\n  selector: 'app-dots',\n  templateUrl: './dots.component.html',\n  styleUrls: ['./dots.component.scss'],\n})\nexport class DotsComponent implements AfterViewInit {\n\n  @ViewChild('dots', { static: true })\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  ctx: CanvasRenderingContext2D;\n  board: Board;\n  rows = 8;\n  columns = 8;\n  highlightRadius = 16;\n\n  constructor() {}\n\n  ngAfterViewInit() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n    this.setCanvasDimensions();\n    this.board = Board.boardBuilder(\n      this.rows,\n      this.columns,\n      this.canvas.nativeElement.width,\n      this.canvas.nativeElement.height,\n      this.buildPlayers()\n    );\n    this.draw();\n  }\n\n  setCanvasDimensions(): void {\n    this.canvas.nativeElement.width = innerWidth;\n    this.canvas.nativeElement.height = innerHeight - 40;\n  }\n\n  buildPlayers(): Player[] {\n    const playerOne: Player = Player.playerBuilder(1, 'blue');\n    const playerTwo: Player = Player.playerBuilder(2, 'red');\n    return [playerOne, playerTwo];\n  }\n\n  handleClick(evt: MouseEvent): void {\n    this.board.handleClick(evt);\n    if (this.board.state.startingDot) {\n      this.highlightClickedDot();\n      this.highlightNeighbors();\n    } else {\n      this.draw();\n    }\n\n  }\n\n\n\n  // Drawing\n\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n  }\n\n  drawPlayerBorder() {\n    this.ctx.strokeStyle = this.board.state.currentPlayer.state.color;\n    this.ctx.lineWidth = 30;\n    this.ctx.strokeRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n  }\n\n  draw() {\n    this.clearCanvas();\n    this.drawPlayerBorder();\n    this.drawDots(this.board.state.dots);\n    this.fillSquares();\n  }\n\n  drawDots(dots: Map<string, Dot>) {\n    dots.forEach(dot => {\n      this.drawDot(dot, false);\n      this.drawConnections(dot);\n    });\n  }\n\n  drawDot(dot: Dot, highlight: boolean) {\n    if (highlight) {\n      this.ctx.fillStyle = 'pink';\n    } else {\n      this.ctx.fillStyle = 'black';\n    }\n\n    this.ctx.beginPath();\n    this.ctx.arc(dot.state.x, dot.state.y, dot.state.radius, 0, Math.PI * 2, true);\n    this.ctx.fill();\n  }\n\n  drawConnections(dot: Dot) {\n    const { north, east, south, west } = dot.state.connections;\n\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 6;\n    this.ctx.beginPath();\n    this.ctx.moveTo(dot.state.x, dot.state.y);\n    if (north) {\n      this.ctx.lineTo(north.state.x, north.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (east) {\n      this.ctx.lineTo(east.state.x, east.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (south) {\n      this.ctx.lineTo(south.state.x, south.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (west) {\n      this.ctx.lineTo(west.state.x, west.state.y);\n    }\n    this.ctx.stroke();\n  }\n\n  fillSquare(dot: Dot, player: number) {\n    this.ctx.fillStyle = this.board.state.players[player].state.color;\n    this.ctx.fillRect(dot.state.x, dot.state.y, this.board.state.columnSpacing, this.board.state.rowSpacing);\n  }\n\n  fillSquares() {\n    this.board.state.players[0].state.squares.forEach(point => {\n      this.fillSquare(point, 0);\n    });\n    this.board.state.players[1].state.squares.forEach(point => {\n      this.fillSquare(point, 1);\n    });\n  }\n\n  highlightClickedDot() {\n    this.drawDot(this.board.state.startingDot, true);\n  }\n\n  highlightNeighbors() {\n\n    const { north, east, south, west } = this.board.state.currentNeighbors;\n\n    this.ctx.strokeStyle = 'goldenrod';\n    this.ctx.lineWidth = 4;\n    this.ctx.beginPath();\n    if (north) {\n      this.ctx.arc(north.state.x, north.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (east) {\n      this.ctx.moveTo(east.state.x + this.highlightRadius, east.state.y);\n      this.ctx.arc(east.state.x, east.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (south) {\n      this.ctx.moveTo(south.state.x + this.highlightRadius, south.state.y);\n      this.ctx.arc(south.state.x, south.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (west) {\n      this.ctx.moveTo(west.state.x + this.highlightRadius, west.state.y);\n      this.ctx.arc(west.state.x, west.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    this.ctx.stroke();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { DotsRoutingModule } from './dots-routing.module';\n\nimport { DotsComponent } from './dots.component';\n\n@NgModule({\n  declarations: [\n    DotsComponent\n  ],\n  imports: [\n    SharedModule,\n    DotsRoutingModule\n  ],\n  exports: [\n    DotsComponent\n  ]\n})\nexport class DotsModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DotsComponent } from './dots.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DotsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DotsRoutingModule { }\n","import { DotState } from '../interfaces/dot-state';\n\nexport class Dot {\n\n  state: DotState;\n\n  static dotBuilder(x: number, y: number, column: number, row: number): Dot {\n    const state: DotState = {\n      id: `${column}${row}`,\n      x,\n      y,\n      column,\n      row,\n      radius: 8,\n      connections: {\n        north: null,\n        east: null,\n        south: null,\n        west: null\n      }\n    };\n    return new Dot(state);\n  }\n\n  constructor(state: DotState) {\n    this.state = state;\n  }\n\n  addConnection(fromDirection: string, dot: Dot) {\n    switch (fromDirection.toLocaleLowerCase()) {\n      case 'north':\n        this.state.connections.north = dot;\n        break;\n      case 'east':\n        this.state.connections.east = dot;\n        break;\n      case 'south':\n        this.state.connections.south = dot;\n        break;\n      case 'west':\n        this.state.connections.west = dot;\n        break;\n    }\n  }\n}\n","import { BoardState } from '../interfaces/board-state';\nimport { Dot } from './dot';\nimport { Player } from './player';\n\nexport class Board {\n\n  state: BoardState;\n\n  static boardBuilder(rows: number, columns: number, width: number, height: number, players: Player[]): Board {\n    const rowSpacing = height / rows;\n    const columnSpacing = width / columns;\n    const topPadding = rowSpacing / 2;\n    const sidePadding = columnSpacing / 2;\n\n    const dots = new Map<string, Dot>();\n\n    for (let row = 0; row < rows; row++) {\n      for (let column = 0; column < columns ; column++) {\n        const x = column * columnSpacing + sidePadding;\n        const y = row * rowSpacing + topPadding;\n\n        const dot = Dot.dotBuilder(x, y, column, row);\n        dots.set(`${column}${row}`, dot);\n      }\n    }\n\n    const totalSquaresLeft = (rows - 1) * (columns - 1);\n\n    const state: BoardState = {\n      dots,\n      rows,\n      columns,\n      width,\n      height,\n      rowSpacing,\n      columnSpacing,\n      topPadding,\n      sidePadding,\n      totalSquaresLeft,\n      players,\n      currentPlayer: players[0],\n      startingDot: null,\n      endingDot: null,\n      currentNeighbors: null\n    };\n    return new Board(state);\n  }\n\n  constructor(state: BoardState) {\n    this.state = state;\n  }\n\n  handleClick(evt: MouseEvent) {\n\n    if (this.state.startingDot) {\n      this.endingMove(evt);\n    } else {\n      this.startingMove(evt);\n    }\n\n    // this.fillSquares();\n\n    // if (this.totalSquaresLeft === 0) this.finishGame();\n    // this.drawPlayerBox();\n  }\n\n  startingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    if (dotWasClicked) {\n      this.getAvailableNeighbors();\n    }\n  }\n\n  endingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    const squareCount = this.state.totalSquaresLeft;\n\n    if (dotWasClicked) {\n      this.makeConnections();\n      if (squareCount === this.state.totalSquaresLeft) { this.changePlayer(); }\n    }\n    this.state.startingDot = null;\n    this.state.endingDot = null;\n  }\n\n  changePlayer() {\n    const nextPlayerIdx = (this.state.currentPlayer.state.id + 1) % 2;\n    this.state.currentPlayer = this.state.players[nextPlayerIdx];\n  }\n\n  calculateDotClicked({ clientX, clientY }: MouseEvent): boolean {\n\n    clientY -= 40;\n    const xIdx = Math.floor(clientX / (this.state.width / this.state.columns));\n    const yIdx = Math.floor(clientY / (this.state.height / this.state.rows));\n\n    const closestDot = this.state.dots.get(`${xIdx}${yIdx}`);\n\n    if (this.state.startingDot) {\n\n      const hasNeighbor =\n      (this.state.currentNeighbors?.north?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.east ?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.south?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.west ?.state.id  === closestDot.state.id);\n\n      if (!hasNeighbor) { return false; }\n    }\n\n    const dy = clientY - closestDot.state.y;\n    const dx = clientX - closestDot.state.x;\n\n    const distance = Math.sqrt(dy * dy + dx * dx);\n\n    const dotClicked = distance < Math.floor(closestDot.state.radius * 1.5);\n\n    if (dotClicked) {\n      const differentDotClicked = this.state.startingDot !== null &&\n        this.state.startingDot?.state.id !== closestDot.state.id;\n\n      if (differentDotClicked) {\n\n        this.state.endingDot = closestDot;\n        return true;\n\n      } else if (!this.state.startingDot) {\n\n        this.state.startingDot = closestDot;\n        return true;\n      }\n      return false;\n\n    } else {\n\n      this.state.startingDot = null;\n      return false;\n    }\n  }\n\n  private getAvailableNeighbors() {\n    const { column, row } = this.state.startingDot.state;\n    const { connections } = this.state.startingDot.state;\n\n    let north: Dot;\n    if (!connections.north && row > 0) {\n      north = this.state.dots.get(`${column}${row - 1}`);\n    }\n\n    let east: Dot;\n    if (!connections.east  && column < this.state.columns - 1) {\n      east = this.state.dots.get(`${column + 1}${row}`);\n    }\n\n    let south: Dot;\n    if (!connections.south && row < this.state.rows - 1) {\n      south = this.state.dots.get(`${column}${row + 1}`);\n    }\n\n    let west: Dot;\n    if (!connections.west && column > 0) {\n      west = this.state.dots.get(`${column - 1}${row}`);\n    }\n\n    this.state.currentNeighbors = { north, east, south, west };\n  }\n\n  private makeConnections() {\n    let direction: string;\n    const neighbors = this.state.currentNeighbors;\n    if (neighbors.north?.state.id === this.state.endingDot?.state.id) {\n      direction = 'north';\n      this.state.startingDot.addConnection('north', this.state.endingDot);\n      this.state.endingDot.addConnection('south', this.state.startingDot);\n    }\n    if (neighbors.east?.state.id === this.state.endingDot?.state.id) {\n      direction = 'east';\n      this.state.startingDot.addConnection('east', this.state.endingDot);\n      this.state.endingDot.addConnection('west', this.state.startingDot);\n    }\n    if (neighbors.south?.state.id === this.state.endingDot?.state.id) {\n      direction = 'south';\n      this.state.startingDot.addConnection('south', this.state.endingDot);\n      this.state.endingDot.addConnection('north', this.state.startingDot);\n    }\n    if (neighbors.west?.state.id === this.state.endingDot?.state.id) {\n      direction = 'west';\n      this.state.startingDot.addConnection('west', this.state.endingDot);\n      this.state.endingDot.addConnection('east', this.state.startingDot);\n    }\n    this.detectFullSquare(direction);\n  }\n\n  private detectFullSquare(direction: string) {\n    if (direction === 'north' || direction === 'south') {\n      this.checkLeftSquare(direction);\n      this.checkRightSquare(direction);\n    } else if (direction === 'west' || direction === 'east') {\n      this.checkTopSquare(direction);\n      this.checkBottomSquare(direction);\n    }\n  }\n\n  private checkLeftSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.west && this.state.endingDot?.state.connections.west) {\n      const dot = this.state.startingDot.state.connections.west;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.west);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.west);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkRightSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.east && this.state.endingDot?.state.connections.east) {\n      const dot = this.state.startingDot.state.connections.east;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkTopSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.north && this.state.endingDot?.state.connections.north) {\n      const dot = this.state.startingDot.state.connections.north;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.north);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.north);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkBottomSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.south && this.state.endingDot?.state.connections.south) {\n      const dot = this.state.startingDot.state.connections.south;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n}\n","import { PlayerState } from '../interfaces/player-state';\n\nexport class Player {\n  state: PlayerState;\n\n  static playerBuilder(order: number, color: string, name?: string): Player {\n    const state: PlayerState = {\n      id: order - 1,\n      name: name ? name : `Player ${order}`,\n      color,\n      squares: []\n    };\n    return new Player(state);\n  }\n\n  constructor(state: PlayerState) {\n    this.state = state;\n  }\n}\n","<canvas\n  #dots\n  class=\"canvas\"\n  (click)=\"handleClick($event)\">\n</canvas>\n"]}