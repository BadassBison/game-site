{"version":3,"sources":["webpack:///src/app/games/dots/objects/dot.ts","webpack:///src/app/games/dots/objects/board.ts","webpack:///src/app/games/dots/objects/player.ts","webpack:///src/app/games/dots/dots-routing.module.ts","webpack:///src/app/games/dots/dots.component.ts","webpack:///src/app/games/dots/dots.component.html","webpack:///src/app/games/dots/dots.module.ts"],"names":["Dot","state","this","x","y","column","row","id","radius","connections","north","east","south","west","fromDirection","dot","toLocaleLowerCase","rows","columns","width","height","players","rowSpacing","columnSpacing","topPadding","sidePadding","dots","Map","dotBuilder","set","totalSquaresLeft","currentPlayer","startingDot","endingDot","currentNeighbors","evt","endingMove","startingMove","calculateDotClicked","getAvailableNeighbors","dotWasClicked","squareCount","makeConnections","changePlayer","clientX","clientY","xIdx","Math","floor","yIdx","closestDot","get","dy","dx","sqrt","direction","neighbors","addConnection","detectFullSquare","checkLeftSquare","checkRightSquare","checkTopSquare","checkBottomSquare","squares","push","Player","order","color","name","routes","path","component","DotsComponent","highlightRadius","ctx","canvas","nativeElement","getContext","setCanvasDimensions","board","boardBuilder","buildPlayers","draw","innerWidth","innerHeight","playerBuilder","handleClick","highlightClickedDot","highlightNeighbors","clearRect","strokeStyle","lineWidth","strokeRect","clearCanvas","drawPlayerBorder","drawDots","fillSquares","forEach","drawDot","drawConnections","highlight","fillStyle","beginPath","arc","PI","fill","moveTo","lineTo","stroke","player","fillRect","point","fillSquare","DotsRoutingModule","forChild","DotsModule"],"mappings":"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","file":"x","sourcesContent":["import { DotState } from '../interfaces/dot-state';\n\nexport class Dot {\n\n  state: DotState;\n\n  static dotBuilder(x: number, y: number, column: number, row: number): Dot {\n    const state: DotState = {\n      id: `${column}${row}`,\n      x,\n      y,\n      column,\n      row,\n      radius: 8,\n      connections: {\n        north: null,\n        east: null,\n        south: null,\n        west: null\n      }\n    };\n    return new Dot(state);\n  }\n\n  constructor(state: DotState) {\n    this.state = state;\n  }\n\n  addConnection(fromDirection: string, dot: Dot) {\n    switch (fromDirection.toLocaleLowerCase()) {\n      case 'north':\n        this.state.connections.north = dot;\n        break;\n      case 'east':\n        this.state.connections.east = dot;\n        break;\n      case 'south':\n        this.state.connections.south = dot;\n        break;\n      case 'west':\n        this.state.connections.west = dot;\n        break;\n    }\n  }\n}\n","import { BoardState } from '../interfaces/board-state';\nimport { Dot } from './dot';\nimport { Player } from './player';\n\nexport class Board {\n\n  state: BoardState;\n\n  static boardBuilder(rows: number, columns: number, width: number, height: number, players: Player[]): Board {\n    const rowSpacing = height / rows;\n    const columnSpacing = width / columns;\n    const topPadding = rowSpacing / 2;\n    const sidePadding = columnSpacing / 2;\n\n    const dots = new Map<string, Dot>();\n\n    for (let row = 0; row < rows; row++) {\n      for (let column = 0; column < columns ; column++) {\n        const x = column * columnSpacing + sidePadding;\n        const y = row * rowSpacing + topPadding;\n\n        const dot = Dot.dotBuilder(x, y, column, row);\n        dots.set(`${column}${row}`, dot);\n      }\n    }\n\n    const totalSquaresLeft = (rows - 1) * (columns - 1);\n\n    const state: BoardState = {\n      dots,\n      rows,\n      columns,\n      width,\n      height,\n      rowSpacing,\n      columnSpacing,\n      topPadding,\n      sidePadding,\n      totalSquaresLeft,\n      players,\n      currentPlayer: players[0],\n      startingDot: null,\n      endingDot: null,\n      currentNeighbors: null\n    };\n    return new Board(state);\n  }\n\n  constructor(state: BoardState) {\n    this.state = state;\n  }\n\n  handleClick(evt: MouseEvent) {\n\n    if (this.state.startingDot) {\n      this.endingMove(evt);\n    } else {\n      this.startingMove(evt);\n    }\n\n    // this.fillSquares();\n\n    // if (this.totalSquaresLeft === 0) this.finishGame();\n    // this.drawPlayerBox();\n  }\n\n  startingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    if (dotWasClicked) {\n      this.getAvailableNeighbors();\n    }\n  }\n\n  endingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    const squareCount = this.state.totalSquaresLeft;\n\n    if (dotWasClicked) {\n      this.makeConnections();\n      if (squareCount === this.state.totalSquaresLeft) { this.changePlayer(); }\n    }\n    this.state.startingDot = null;\n    this.state.endingDot = null;\n  }\n\n  changePlayer() {\n    const nextPlayerIdx = (this.state.currentPlayer.state.id + 1) % 2;\n    this.state.currentPlayer = this.state.players[nextPlayerIdx];\n  }\n\n  calculateDotClicked({ clientX, clientY }: MouseEvent): boolean {\n\n    clientY -= 40;\n    const xIdx = Math.floor(clientX / (this.state.width / this.state.columns));\n    const yIdx = Math.floor(clientY / (this.state.height / this.state.rows));\n\n    const closestDot = this.state.dots.get(`${xIdx}${yIdx}`);\n\n    if (this.state.startingDot) {\n\n      const hasNeighbor =\n      (this.state.currentNeighbors?.north?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.east ?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.south?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.west ?.state.id  === closestDot.state.id);\n\n      if (!hasNeighbor) { return false; }\n    }\n\n    const dy = clientY - closestDot.state.y;\n    const dx = clientX - closestDot.state.x;\n\n    const distance = Math.sqrt(dy * dy + dx * dx);\n\n    const dotClicked = distance < Math.floor(closestDot.state.radius * 1.5);\n\n    if (dotClicked) {\n      const differentDotClicked = this.state.startingDot !== null &&\n        this.state.startingDot?.state.id !== closestDot.state.id;\n\n      if (differentDotClicked) {\n\n        this.state.endingDot = closestDot;\n        return true;\n\n      } else if (!this.state.startingDot) {\n\n        this.state.startingDot = closestDot;\n        return true;\n      }\n      return false;\n\n    } else {\n\n      this.state.startingDot = null;\n      return false;\n    }\n  }\n\n  private getAvailableNeighbors() {\n    const { column, row } = this.state.startingDot.state;\n    const { connections } = this.state.startingDot.state;\n\n    let north: Dot;\n    if (!connections.north && row > 0) {\n      north = this.state.dots.get(`${column}${row - 1}`);\n    }\n\n    let east: Dot;\n    if (!connections.east  && column < this.state.columns - 1) {\n      east = this.state.dots.get(`${column + 1}${row}`);\n    }\n\n    let south: Dot;\n    if (!connections.south && row < this.state.rows - 1) {\n      south = this.state.dots.get(`${column}${row + 1}`);\n    }\n\n    let west: Dot;\n    if (!connections.west && column > 0) {\n      west = this.state.dots.get(`${column - 1}${row}`);\n    }\n\n    this.state.currentNeighbors = { north, east, south, west };\n  }\n\n  private makeConnections() {\n    let direction: string;\n    const neighbors = this.state.currentNeighbors;\n    if (neighbors.north?.state.id === this.state.endingDot?.state.id) {\n      direction = 'north';\n      this.state.startingDot.addConnection('north', this.state.endingDot);\n      this.state.endingDot.addConnection('south', this.state.startingDot);\n    }\n    if (neighbors.east?.state.id === this.state.endingDot?.state.id) {\n      direction = 'east';\n      this.state.startingDot.addConnection('east', this.state.endingDot);\n      this.state.endingDot.addConnection('west', this.state.startingDot);\n    }\n    if (neighbors.south?.state.id === this.state.endingDot?.state.id) {\n      direction = 'south';\n      this.state.startingDot.addConnection('south', this.state.endingDot);\n      this.state.endingDot.addConnection('north', this.state.startingDot);\n    }\n    if (neighbors.west?.state.id === this.state.endingDot?.state.id) {\n      direction = 'west';\n      this.state.startingDot.addConnection('west', this.state.endingDot);\n      this.state.endingDot.addConnection('east', this.state.startingDot);\n    }\n    this.detectFullSquare(direction);\n  }\n\n  private detectFullSquare(direction: string) {\n    if (direction === 'north' || direction === 'south') {\n      this.checkLeftSquare(direction);\n      this.checkRightSquare(direction);\n    } else if (direction === 'west' || direction === 'east') {\n      this.checkTopSquare(direction);\n      this.checkBottomSquare(direction);\n    }\n  }\n\n  private checkLeftSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.west && this.state.endingDot?.state.connections.west) {\n      const dot = this.state.startingDot.state.connections.west;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.west);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.west);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkRightSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.east && this.state.endingDot?.state.connections.east) {\n      const dot = this.state.startingDot.state.connections.east;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkTopSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.north && this.state.endingDot?.state.connections.north) {\n      const dot = this.state.startingDot.state.connections.north;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.north);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.north);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkBottomSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.south && this.state.endingDot?.state.connections.south) {\n      const dot = this.state.startingDot.state.connections.south;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n}\n","import { PlayerState } from '../interfaces/player-state';\n\nexport class Player {\n  state: PlayerState;\n\n  static playerBuilder(order: number, color: string, name?: string): Player {\n    const state: PlayerState = {\n      id: order - 1,\n      name: name ? name : `Player ${order}`,\n      color,\n      squares: []\n    };\n    return new Player(state);\n  }\n\n  constructor(state: PlayerState) {\n    this.state = state;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DotsComponent } from './dots.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DotsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DotsRoutingModule { }\n","import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { Board } from './objects/board';\nimport { Dot } from './objects/dot';\nimport { Player } from './objects/player';\n\n@Component({\n  selector: 'app-dots',\n  templateUrl: './dots.component.html',\n  styleUrls: ['./dots.component.scss'],\n})\nexport class DotsComponent implements AfterViewInit {\n\n  @ViewChild('dots', { static: true })\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  ctx: CanvasRenderingContext2D;\n  board: Board;\n  rows = 8;\n  columns = 8;\n  highlightRadius = 16;\n\n  constructor() {}\n\n  ngAfterViewInit() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n    this.setCanvasDimensions();\n    this.board = Board.boardBuilder(\n      this.rows,\n      this.columns,\n      this.canvas.nativeElement.width,\n      this.canvas.nativeElement.height,\n      this.buildPlayers()\n    );\n    this.draw();\n  }\n\n  setCanvasDimensions(): void {\n    this.canvas.nativeElement.width = innerWidth;\n    this.canvas.nativeElement.height = innerHeight - 40;\n  }\n\n  buildPlayers(): Player[] {\n    const playerOne: Player = Player.playerBuilder(1, 'blue');\n    const playerTwo: Player = Player.playerBuilder(2, 'red');\n    return [playerOne, playerTwo];\n  }\n\n  handleClick(evt: MouseEvent): void {\n    this.board.handleClick(evt);\n    if (this.board.state.startingDot) {\n      this.highlightClickedDot();\n      this.highlightNeighbors();\n    } else {\n      this.draw();\n    }\n\n  }\n\n\n\n  // Drawing\n\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n  }\n\n  drawPlayerBorder() {\n    this.ctx.strokeStyle = this.board.state.currentPlayer.state.color;\n    this.ctx.lineWidth = 30;\n    this.ctx.strokeRect(0, 0, this.canvas.nativeElement.width, this.canvas.nativeElement.height);\n  }\n\n  draw() {\n    this.clearCanvas();\n    this.drawPlayerBorder();\n    this.drawDots(this.board.state.dots);\n    this.fillSquares();\n  }\n\n  drawDots(dots: Map<string, Dot>) {\n    dots.forEach(dot => {\n      this.drawDot(dot, false);\n      this.drawConnections(dot);\n    });\n  }\n\n  drawDot(dot: Dot, highlight: boolean) {\n    if (highlight) {\n      this.ctx.fillStyle = 'pink';\n    } else {\n      this.ctx.fillStyle = 'black';\n    }\n\n    this.ctx.beginPath();\n    this.ctx.arc(dot.state.x, dot.state.y, dot.state.radius, 0, Math.PI * 2, true);\n    this.ctx.fill();\n  }\n\n  drawConnections(dot: Dot) {\n    const { north, east, south, west } = dot.state.connections;\n\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 6;\n    this.ctx.beginPath();\n    this.ctx.moveTo(dot.state.x, dot.state.y);\n    if (north) {\n      this.ctx.lineTo(north.state.x, north.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (east) {\n      this.ctx.lineTo(east.state.x, east.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (south) {\n      this.ctx.lineTo(south.state.x, south.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (west) {\n      this.ctx.lineTo(west.state.x, west.state.y);\n    }\n    this.ctx.stroke();\n  }\n\n  fillSquare(dot: Dot, player: number) {\n    this.ctx.fillStyle = this.board.state.players[player].state.color;\n    this.ctx.fillRect(dot.state.x, dot.state.y, this.board.state.columnSpacing, this.board.state.rowSpacing);\n  }\n\n  fillSquares() {\n    this.board.state.players[0].state.squares.forEach(point => {\n      this.fillSquare(point, 0);\n    });\n    this.board.state.players[1].state.squares.forEach(point => {\n      this.fillSquare(point, 1);\n    });\n  }\n\n  highlightClickedDot() {\n    this.drawDot(this.board.state.startingDot, true);\n  }\n\n  highlightNeighbors() {\n\n    const { north, east, south, west } = this.board.state.currentNeighbors;\n\n    this.ctx.strokeStyle = 'goldenrod';\n    this.ctx.lineWidth = 4;\n    this.ctx.beginPath();\n    if (north) {\n      this.ctx.arc(north.state.x, north.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (east) {\n      this.ctx.moveTo(east.state.x + this.highlightRadius, east.state.y);\n      this.ctx.arc(east.state.x, east.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (south) {\n      this.ctx.moveTo(south.state.x + this.highlightRadius, south.state.y);\n      this.ctx.arc(south.state.x, south.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (west) {\n      this.ctx.moveTo(west.state.x + this.highlightRadius, west.state.y);\n      this.ctx.arc(west.state.x, west.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    this.ctx.stroke();\n  }\n\n}\n","<canvas\n  #dots\n  class=\"canvas\"\n  (click)=\"handleClick($event)\">\n</canvas>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { DotsRoutingModule } from './dots-routing.module';\n\nimport { DotsComponent } from './dots.component';\n\n@NgModule({\n  declarations: [\n    DotsComponent\n  ],\n  imports: [\n    SharedModule,\n    DotsRoutingModule\n  ],\n  exports: [\n    DotsComponent\n  ]\n})\nexport class DotsModule { }\n"]}