{"version":3,"sources":["webpack:///src/app/games/dots/objects/dot.ts","webpack:///src/app/games/dots/objects/board.ts","webpack:///src/app/games/dots/objects/player.ts","webpack:///src/app/games/dots/objects/drawer.ts","webpack:///src/app/games/dots/dots.component.html","webpack:///src/app/games/dots/dots-routing.module.ts","webpack:///src/app/games/dots/dots.component.ts","webpack:///src/app/games/dots/dots.module.ts"],"names":["Dot","state","this","fromDirection","dot","toLocaleLowerCase","connections","north","east","south","west","x","y","column","row","id","radius","evt","startingDot","endingMove","startingMove","calculateDotClicked","getAvailableNeighbors","dotWasClicked","squareCount","totalSquaresLeft","makeConnections","changePlayer","endingDot","currentPlayer","players","clientY","clientX","xIdx","Math","floor","width","columns","yIdx","height","rows","closestDot","dots","get","parseIdx","currentNeighbors","dy","dx","sqrt","direction","neighbors","addConnection","detectFullSquare","checkLeftSquare","checkRightSquare","checkTopSquare","checkBottomSquare","squares","push","rowSpacing","columnSpacing","topPadding","sidePadding","Map","dotBuilder","set","idx","Player","order","color","name","Drawer","canvas","highlightRadius","ctx","getContext","board","renderAll","clearCanvas","drawPlayerBorder","drawDots","fillSquares","highlightDots","highlightClickedDot","highlightNeighbors","clearRect","strokeStyle","lineWidth","strokeRect","forEach","drawDot","drawConnections","highlight","fillStyle","beginPath","arc","PI","fill","moveTo","lineTo","stroke","player","fillRect","playerOne","fillSquare","playerTwo","DotsComponent","DotsModule","DotsRoutingModule","routes","path","component","gameStarted","gameInitialized","gameContinued","showingInformation","colors","btn","console","log","reinitializeGame","initializeGame","setCanvasDimensions","boardBuilder","nativeElement","buildPlayers","drawer","draw","setCanvas","handleClick","innerWidth","innerHeight","playerBuilder","playerOneColor","playerOneName","playerTwoColor","playerTwoName","forChild"],"mappings":"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","file":"x","sourcesContent":["import { DotState } from '../interfaces/dot-state';\n\nexport class Dot {\n\n  state: DotState;\n\n  static dotBuilder(x: number, y: number, column: number, row: number): Dot {\n    const state: DotState = {\n      id: `${column}${row}`,\n      x,\n      y,\n      column,\n      row,\n      radius: 8,\n      connections: {\n        north: null,\n        east: null,\n        south: null,\n        west: null\n      }\n    };\n    return new Dot(state);\n  }\n\n  constructor(state: DotState) {\n    this.state = state;\n  }\n\n  addConnection(fromDirection: string, dot: Dot) {\n    switch (fromDirection.toLocaleLowerCase()) {\n      case 'north':\n        this.state.connections.north = dot;\n        break;\n      case 'east':\n        this.state.connections.east = dot;\n        break;\n      case 'south':\n        this.state.connections.south = dot;\n        break;\n      case 'west':\n        this.state.connections.west = dot;\n        break;\n    }\n  }\n}\n","import { BoardState } from '../interfaces/board-state';\nimport { Dot } from './dot';\nimport { Player } from './player';\n\nexport class Board {\n\n  state: BoardState;\n\n  static boardBuilder(rows: number, columns: number, width: number, height: number, players: Player[]): Board {\n    const rowSpacing = height / rows;\n    const columnSpacing = width / columns;\n    const topPadding = rowSpacing / 2;\n    const sidePadding = columnSpacing / 2;\n\n    const dots = new Map<string, Dot>();\n\n    for (let row = 0; row < rows; row++) {\n      for (let column = 0; column < columns ; column++) {\n        const x = column * columnSpacing + sidePadding;\n        const y = row * rowSpacing + topPadding;\n\n        const dot = Dot.dotBuilder(x, y, column, row);\n\n        if (column <= 9) {  }\n        dots.set(`${Board.parseIdx(column)}${Board.parseIdx(row)}`, dot);\n      }\n    }\n\n    const totalSquaresLeft = (rows - 1) * (columns - 1);\n\n    const state: BoardState = {\n      dots,\n      rows,\n      columns,\n      width,\n      height,\n      rowSpacing,\n      columnSpacing,\n      topPadding,\n      sidePadding,\n      totalSquaresLeft,\n      players,\n      currentPlayer: players[0],\n      startingDot: null,\n      endingDot: null,\n      currentNeighbors: null\n    };\n    return new Board(state);\n  }\n\n  static parseIdx(idx: number): string {\n    if (idx <= 9) {\n      return `0${idx}`;\n    } else {\n      return `${idx}`;\n    }\n  }\n\n  constructor(state: BoardState) {\n    this.state = state;\n  }\n\n  handleClick(evt: MouseEvent) {\n\n    if (this.state.startingDot) {\n      this.endingMove(evt);\n    } else {\n      this.startingMove(evt);\n    }\n  }\n\n  startingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    if (dotWasClicked) {\n      this.getAvailableNeighbors();\n    }\n  }\n\n  endingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    const squareCount = this.state.totalSquaresLeft;\n\n    if (dotWasClicked) {\n      this.makeConnections();\n      if (squareCount === this.state.totalSquaresLeft) { this.changePlayer(); }\n    }\n    this.state.startingDot = null;\n    this.state.endingDot = null;\n  }\n\n  changePlayer() {\n    const nextPlayerIdx = (this.state.currentPlayer.state.id + 1) % 2;\n    this.state.currentPlayer = this.state.players[nextPlayerIdx];\n  }\n\n  calculateDotClicked({ clientX, clientY }: MouseEvent): boolean {\n\n    clientY -= 40;\n    const xIdx = Math.floor(clientX / (this.state.width / this.state.columns));\n    const yIdx = Math.floor(clientY / (this.state.height / this.state.rows));\n\n    const closestDot = this.state.dots.get(`${Board.parseIdx(xIdx)}${Board.parseIdx(yIdx)}`);\n\n    if (this.state.startingDot) {\n\n      const hasNeighbor =\n      (this.state.currentNeighbors?.north?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.east ?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.south?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.west ?.state.id  === closestDot.state.id);\n\n      if (!hasNeighbor) { return false; }\n    }\n\n    const dy = clientY - closestDot.state.y;\n    const dx = clientX - closestDot.state.x;\n\n    const distance = Math.sqrt(dy * dy + dx * dx);\n\n    const dotClicked = distance < Math.floor(closestDot.state.radius * 1.5);\n\n    if (dotClicked) {\n      const differentDotClicked = this.state.startingDot !== null &&\n        this.state.startingDot?.state.id !== closestDot.state.id;\n\n      if (differentDotClicked) {\n\n        this.state.endingDot = closestDot;\n        return true;\n\n      } else if (!this.state.startingDot) {\n\n        this.state.startingDot = closestDot;\n        return true;\n      }\n      return false;\n\n    } else {\n\n      this.state.startingDot = null;\n      return false;\n    }\n  }\n\n  private getAvailableNeighbors() {\n    const { column, row } = this.state.startingDot.state;\n    const { connections } = this.state.startingDot.state;\n\n    let north: Dot;\n    if (!connections.north && row > 0) {\n      north = this.state.dots.get(`${Board.parseIdx(column)}${Board.parseIdx(row - 1)}`);\n    }\n\n    let east: Dot;\n    if (!connections.east  && column < this.state.columns - 1) {\n      east = this.state.dots.get(`${Board.parseIdx(column + 1)}${Board.parseIdx(row)}`);\n    }\n\n    let south: Dot;\n    if (!connections.south && row < this.state.rows - 1) {\n      south = this.state.dots.get(`${Board.parseIdx(column)}${Board.parseIdx(row + 1)}`);\n    }\n\n    let west: Dot;\n    if (!connections.west && column > 0) {\n      west = this.state.dots.get(`${Board.parseIdx(column - 1)}${Board.parseIdx(row)}`);\n    }\n\n    this.state.currentNeighbors = { north, east, south, west };\n  }\n\n  private makeConnections() {\n    let direction: string;\n    const neighbors = this.state.currentNeighbors;\n    if (neighbors.north?.state.id === this.state.endingDot?.state.id) {\n      direction = 'north';\n      this.state.startingDot.addConnection('north', this.state.endingDot);\n      this.state.endingDot.addConnection('south', this.state.startingDot);\n    }\n    if (neighbors.east?.state.id === this.state.endingDot?.state.id) {\n      direction = 'east';\n      this.state.startingDot.addConnection('east', this.state.endingDot);\n      this.state.endingDot.addConnection('west', this.state.startingDot);\n    }\n    if (neighbors.south?.state.id === this.state.endingDot?.state.id) {\n      direction = 'south';\n      this.state.startingDot.addConnection('south', this.state.endingDot);\n      this.state.endingDot.addConnection('north', this.state.startingDot);\n    }\n    if (neighbors.west?.state.id === this.state.endingDot?.state.id) {\n      direction = 'west';\n      this.state.startingDot.addConnection('west', this.state.endingDot);\n      this.state.endingDot.addConnection('east', this.state.startingDot);\n    }\n    this.detectFullSquare(direction);\n  }\n\n  private detectFullSquare(direction: string) {\n    if (direction === 'north' || direction === 'south') {\n      this.checkLeftSquare(direction);\n      this.checkRightSquare(direction);\n    } else if (direction === 'west' || direction === 'east') {\n      this.checkTopSquare(direction);\n      this.checkBottomSquare(direction);\n    }\n  }\n\n  private checkLeftSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.west && this.state.endingDot?.state.connections.west) {\n      const dot = this.state.startingDot.state.connections.west;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.west);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.west);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkRightSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.east && this.state.endingDot?.state.connections.east) {\n      const dot = this.state.startingDot.state.connections.east;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkTopSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.north && this.state.endingDot?.state.connections.north) {\n      const dot = this.state.startingDot.state.connections.north;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.north);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.north);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkBottomSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.south && this.state.endingDot?.state.connections.south) {\n      const dot = this.state.startingDot.state.connections.south;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n}\n","import { PlayerState } from '../interfaces/player-state';\n\nexport class Player {\n  state: PlayerState;\n\n  static playerBuilder(order: number, color: string, name?: string): Player {\n    const state: PlayerState = {\n      id: order - 1,\n      name: name ? name : `Player ${order}`,\n      color,\n      squares: []\n    };\n    return new Player(state);\n  }\n\n  constructor(state: PlayerState) {\n    this.state = state;\n  }\n}\n","import { Board } from './board';\nimport { Dot } from './dot';\nimport { Player } from './player';\n\nexport class Drawer {\n\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  highlightRadius = 16;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  draw(board: Board, renderAll: boolean) {\n    if (renderAll) {\n      this.clearCanvas();\n      this.drawPlayerBorder(board);\n      this.drawDots(board.state.dots);\n      this.fillSquares(board);\n    } else {\n      this.highlightDots(board);\n    }\n  }\n\n  setCanvas(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  private highlightDots(board: Board) {\n    this.highlightClickedDot(board.state.startingDot);\n    this.highlightNeighbors(board);\n  }\n\n  private clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawPlayerBorder(board: Board) {\n    this.ctx.strokeStyle = board.state.currentPlayer.state.color;\n    this.ctx.lineWidth = 30;\n    this.ctx.strokeRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawDots(dots: Map<string, Dot>) {\n    dots.forEach(dot => {\n      this.drawDot(dot, false);\n      this.drawConnections(dot);\n    });\n  }\n\n  private drawDot(dot: Dot, highlight: boolean) {\n    if (highlight) {\n      this.ctx.fillStyle = 'pink';\n    } else {\n      this.ctx.fillStyle = 'black';\n    }\n\n    this.ctx.beginPath();\n    this.ctx.arc(dot.state.x, dot.state.y, dot.state.radius, 0, Math.PI * 2, true);\n    this.ctx.fill();\n  }\n\n  private drawConnections(dot: Dot) {\n    const { north, east, south, west } = dot.state.connections;\n\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 6;\n    this.ctx.beginPath();\n    this.ctx.moveTo(dot.state.x, dot.state.y);\n    if (north) {\n      this.ctx.lineTo(north.state.x, north.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (east) {\n      this.ctx.lineTo(east.state.x, east.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (south) {\n      this.ctx.lineTo(south.state.x, south.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (west) {\n      this.ctx.lineTo(west.state.x, west.state.y);\n    }\n    this.ctx.stroke();\n  }\n\n  private fillSquare(dot: Dot, player: Player, columnSpacing: number, rowSpacing: number) {\n    this.ctx.fillStyle = player.state.color;\n    this.ctx.fillRect(dot.state.x, dot.state.y, columnSpacing, rowSpacing);\n  }\n\n  private fillSquares(board: Board) {\n    const columnSpacing = board.state.columnSpacing;\n    const rowSpacing = board.state.rowSpacing;\n\n    const playerOne = board.state.players[0];\n    playerOne.state.squares.forEach(dot => {\n      this.fillSquare(dot, playerOne, columnSpacing, rowSpacing);\n    });\n\n    const playerTwo = board.state.players[1];\n    board.state.players[1].state.squares.forEach(dot => {\n      this.fillSquare(dot, playerTwo, columnSpacing, rowSpacing);\n    });\n  }\n\n  private highlightClickedDot(dot: Dot) {\n    this.drawDot(dot, true);\n  }\n\n  private highlightNeighbors(board: Board) {\n\n    const { north, east, south, west } = board.state.currentNeighbors;\n\n    this.ctx.strokeStyle = 'goldenrod';\n    this.ctx.lineWidth = 4;\n    this.ctx.beginPath();\n    if (north) {\n      this.ctx.arc(north.state.x, north.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (east) {\n      this.ctx.moveTo(east.state.x + this.highlightRadius, east.state.y);\n      this.ctx.arc(east.state.x, east.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (south) {\n      this.ctx.moveTo(south.state.x + this.highlightRadius, south.state.y);\n      this.ctx.arc(south.state.x, south.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (west) {\n      this.ctx.moveTo(west.state.x + this.highlightRadius, west.state.y);\n      this.ctx.arc(west.state.x, west.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    this.ctx.stroke();\n  }\n\n}\n","<div *ngIf=\"!gameStarted; else playing\" class=\"start-screen\">\n  <mat-card class=\"card\">\n    <mat-card-header>\n      <mat-card-title>Dots</mat-card-title>\n    </mat-card-header>\n    <mat-card-content *ngIf=\"!showingInformation; else information\">\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Number of Rows</mat-label>\n        <input matInput [(ngModel)]=\"rows\" placeholder=\"Rows\">\n        <mat-icon matSuffix>scatter_plot</mat-icon>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Number of Columns</mat-label>\n        <input matInput [(ngModel)]=\"columns\" placeholder=\"Columns\">\n        <mat-icon matSuffix>scatter_plot</mat-icon>\n      </mat-form-field>\n\n      <mat-card>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Player 1 Name</mat-label>\n          <input matInput [(ngModel)]=\"playerOneName\" placeholder=\"Enter Name\">\n          <mat-icon matSuffix>face</mat-icon>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Color</mat-label>\n          <mat-select [(value)]=\"playerOneColor\">\n            <mat-option>None</mat-option>\n            <mat-option *ngFor=\"let color of colors\" [value]=\"color\">{{ color }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-card>\n\n      <mat-card>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Player 2 Name</mat-label>\n          <input matInput [(ngModel)]=\"playerTwoName\" placeholder=\"Enter Name\">\n          <mat-icon matSuffix>face</mat-icon>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Color</mat-label>\n          <mat-select [(value)]=\"playerTwoColor\">\n            <mat-option>None</mat-option>\n            <mat-option *ngFor=\"let color of colors\" [value]=\"color\">{{ color }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-card>\n\n    </mat-card-content>\n\n    <ng-template #information>\n      <mat-card-content>\n        <h3>Information</h3>\n        <ul>\n          <li>Connect dots to make squares</li>\n          <li>Making Squares gives you an extra turn</li>\n          <li>Person who makes the most squares wins</li>\n          <li>Press 'm' for the menu</li>\n        </ul>\n      </mat-card-content>\n    </ng-template>\n\n    <mat-card-actions>\n      <button mat-button (click)=\"startGame()\">PLAY</button>\n      <button mat-button (click)=\"toggleInformation()\">INSTRUCTIONS</button>\n      <button mat-button *ngIf=\"gameInitialized\" (click)=\"continueGame()\">CONTINUE</button>\n    </mat-card-actions>\n  </mat-card>\n\n</div>\n\n<ng-template #playing>\n  <canvas\n    #dots\n    class=\"canvas\"\n    (click)=\"handleClick($event)\">\n  </canvas>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DotsComponent } from './dots.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DotsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DotsRoutingModule { }\n","import { Component, ViewChild, ElementRef, AfterViewChecked, HostListener } from '@angular/core';\nimport { Board } from './objects/board';\nimport { Player } from './objects/player';\nimport { Drawer } from './objects/drawer';\n\n@Component({\n  selector: 'app-dots',\n  templateUrl: './dots.component.html',\n  styleUrls: ['./dots.component.scss'],\n})\nexport class DotsComponent implements AfterViewChecked {\n\n  @ViewChild('dots', { static: false })\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  gameStarted = false;\n  gameInitialized = false;\n  gameContinued = false;\n  showingInformation = false;\n\n  board: Board;\n  drawer: Drawer;\n  rows: number;\n  columns: number;\n  playerOneName: string;\n  playerOneColor: string;\n  playerTwoName: string;\n  playerTwoColor: string;\n  colors: string[] = ['red', 'blue', 'green', 'purple', 'orange'];\n\n  @HostListener('window:keydown', ['$event.key'])\n  onKeypress(btn: string) {\n    if (btn === 'm') {\n      this.gameStarted = false;\n    }\n  }\n\n  ngAfterViewChecked() {\n    if (this.gameStarted) {\n      if (!this.gameInitialized) {\n        this.initializeGame();\n      } else if (this.gameContinued) {\n        console.log(this.board);\n        this.reinitializeGame();\n      }\n    }\n  }\n\n  startGame() {\n    this.gameStarted = true;\n    this.gameInitialized = false;\n  }\n\n  continueGame() {\n    this.gameStarted = true;\n    this.gameContinued = true;\n  }\n\n  toggleInformation() {\n    this.showingInformation = !this.showingInformation;\n  }\n\n  initializeGame() {\n    this.setCanvasDimensions();\n    this.board = Board.boardBuilder(\n      this.rows > 3 ? this.rows : 6,\n      this.columns > 3 ? this.columns : 6,\n      this.canvas.nativeElement.width,\n      this.canvas.nativeElement.height,\n      this.buildPlayers()\n    );\n\n    this.drawer = new Drawer(this.canvas.nativeElement);\n    this.drawer.draw(this.board, true);\n    this.gameInitialized = true;\n  }\n\n  reinitializeGame() {\n    this.setCanvasDimensions();\n    this.drawer.setCanvas(this.canvas.nativeElement);\n    this.drawer.draw(this.board, true);\n    this.gameContinued = false;\n  }\n\n  handleClick(evt: MouseEvent): void {\n    this.board.handleClick(evt);\n    if (this.board.state.startingDot) {\n      this.drawer.draw(this.board, false);\n    } else {\n      this.drawer.draw(this.board, true);\n    }\n  }\n\n  finishGame() {\n    // TODO: Add UI for the game over screen\n    console.log('Game is over');\n  }\n\n  private setCanvasDimensions(): void {\n    this.canvas.nativeElement.width = innerWidth;\n    this.canvas.nativeElement.height = innerHeight - 40;\n  }\n\n  private buildPlayers(): Player[] {\n    const playerOne: Player = Player.playerBuilder(1, this.playerOneColor || 'blue', this.playerOneName);\n    const playerTwo: Player = Player.playerBuilder(2, this.playerTwoColor || 'red', this.playerTwoName);\n    return [playerOne, playerTwo];\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { DotsRoutingModule } from './dots-routing.module';\n\nimport { DotsComponent } from './dots.component';\n\n@NgModule({\n  declarations: [\n    DotsComponent\n  ],\n  imports: [\n    SharedModule,\n    DotsRoutingModule\n  ],\n  exports: [\n    DotsComponent\n  ]\n})\nexport class DotsModule { }\n"]}