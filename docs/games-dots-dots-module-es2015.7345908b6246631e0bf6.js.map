{"version":3,"sources":["webpack:///src/app/games/dots/objects/dot.ts","webpack:///src/app/games/dots/objects/board.ts","webpack:///src/app/games/dots/objects/player.ts","webpack:///src/app/games/dots/objects/drawer.ts","webpack:///src/app/games/dots/dots.component.html","webpack:///src/app/games/dots/dots-routing.module.ts","webpack:///src/app/games/dots/dots.component.ts","webpack:///src/app/games/dots/dots.module.ts"],"names":["Dot","state","this","x","y","column","row","id","radius","connections","north","east","south","west","fromDirection","dot","toLocaleLowerCase","rows","columns","width","height","players","rowSpacing","columnSpacing","topPadding","sidePadding","dots","Map","dotBuilder","set","parseIdx","totalSquaresLeft","currentPlayer","startingDot","endingDot","currentNeighbors","idx","evt","endingMove","startingMove","calculateDotClicked","getAvailableNeighbors","dotWasClicked","squareCount","makeConnections","changePlayer","clientX","clientY","xIdx","Math","floor","yIdx","closestDot","get","dy","dx","sqrt","direction","neighbors","addConnection","detectFullSquare","checkLeftSquare","checkRightSquare","checkTopSquare","checkBottomSquare","squares","push","Player","order","color","name","Drawer","canvas","highlightRadius","ctx","getContext","board","renderAll","clearCanvas","drawPlayerBorder","drawDots","fillSquares","highlightDots","highlightClickedDot","highlightNeighbors","clearRect","strokeStyle","lineWidth","strokeRect","forEach","drawDot","drawConnections","highlight","fillStyle","beginPath","arc","PI","fill","moveTo","lineTo","stroke","player","fillRect","playerOne","fillSquare","playerTwo","routes","path","component","DotsComponent","gameStarted","gameInitialized","gameContinued","showingInformation","colors","btn","console","log","reinitializeGame","initializeGame","setCanvasDimensions","boardBuilder","nativeElement","buildPlayers","drawer","draw","setCanvas","handleClick","innerWidth","innerHeight","playerBuilder","playerOneColor","playerOneName","playerTwoColor","playerTwoName","DotsRoutingModule","forChild","DotsModule"],"mappings":"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","file":"x","sourcesContent":["import { DotState } from '../interfaces/dot-state';\n\nexport class Dot {\n\n  state: DotState;\n\n  static dotBuilder(x: number, y: number, column: number, row: number): Dot {\n    const state: DotState = {\n      id: `${column}${row}`,\n      x,\n      y,\n      column,\n      row,\n      radius: 8,\n      connections: {\n        north: null,\n        east: null,\n        south: null,\n        west: null\n      }\n    };\n    return new Dot(state);\n  }\n\n  constructor(state: DotState) {\n    this.state = state;\n  }\n\n  addConnection(fromDirection: string, dot: Dot) {\n    switch (fromDirection.toLocaleLowerCase()) {\n      case 'north':\n        this.state.connections.north = dot;\n        break;\n      case 'east':\n        this.state.connections.east = dot;\n        break;\n      case 'south':\n        this.state.connections.south = dot;\n        break;\n      case 'west':\n        this.state.connections.west = dot;\n        break;\n    }\n  }\n}\n","import { BoardState } from '../interfaces/board-state';\nimport { Dot } from './dot';\nimport { Player } from './player';\n\nexport class Board {\n\n  state: BoardState;\n\n  static boardBuilder(rows: number, columns: number, width: number, height: number, players: Player[]): Board {\n    const rowSpacing = height / rows;\n    const columnSpacing = width / columns;\n    const topPadding = rowSpacing / 2;\n    const sidePadding = columnSpacing / 2;\n\n    const dots = new Map<string, Dot>();\n\n    for (let row = 0; row < rows; row++) {\n      for (let column = 0; column < columns ; column++) {\n        const x = column * columnSpacing + sidePadding;\n        const y = row * rowSpacing + topPadding;\n\n        const dot = Dot.dotBuilder(x, y, column, row);\n\n        if (column <= 9) {  }\n        dots.set(`${Board.parseIdx(column)}${Board.parseIdx(row)}`, dot);\n      }\n    }\n\n    const totalSquaresLeft = (rows - 1) * (columns - 1);\n\n    const state: BoardState = {\n      dots,\n      rows,\n      columns,\n      width,\n      height,\n      rowSpacing,\n      columnSpacing,\n      topPadding,\n      sidePadding,\n      totalSquaresLeft,\n      players,\n      currentPlayer: players[0],\n      startingDot: null,\n      endingDot: null,\n      currentNeighbors: null\n    };\n    return new Board(state);\n  }\n\n  static parseIdx(idx: number): string {\n    if (idx <= 9) {\n      return `0${idx}`;\n    } else {\n      return `${idx}`;\n    }\n  }\n\n  constructor(state: BoardState) {\n    this.state = state;\n  }\n\n  handleClick(evt: MouseEvent) {\n\n    if (this.state.startingDot) {\n      this.endingMove(evt);\n    } else {\n      this.startingMove(evt);\n    }\n  }\n\n  startingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    if (dotWasClicked) {\n      this.getAvailableNeighbors();\n    }\n  }\n\n  endingMove(evt: MouseEvent): void {\n    const dotWasClicked = this.calculateDotClicked(evt);\n\n    const squareCount = this.state.totalSquaresLeft;\n\n    if (dotWasClicked) {\n      this.makeConnections();\n      if (squareCount === this.state.totalSquaresLeft) { this.changePlayer(); }\n    }\n    this.state.startingDot = null;\n    this.state.endingDot = null;\n  }\n\n  changePlayer() {\n    const nextPlayerIdx = (this.state.currentPlayer.state.id + 1) % 2;\n    this.state.currentPlayer = this.state.players[nextPlayerIdx];\n  }\n\n  calculateDotClicked({ clientX, clientY }: MouseEvent): boolean {\n\n    clientY -= 40;\n    const xIdx = Math.floor(clientX / (this.state.width / this.state.columns));\n    const yIdx = Math.floor(clientY / (this.state.height / this.state.rows));\n\n    const closestDot = this.state.dots.get(`${Board.parseIdx(xIdx)}${Board.parseIdx(yIdx)}`);\n\n    if (this.state.startingDot) {\n\n      const hasNeighbor =\n      (this.state.currentNeighbors?.north?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.east ?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.south?.state.id  === closestDot.state.id) ||\n      (this.state.currentNeighbors?.west ?.state.id  === closestDot.state.id);\n\n      if (!hasNeighbor) { return false; }\n    }\n\n    const dy = clientY - closestDot.state.y;\n    const dx = clientX - closestDot.state.x;\n\n    const distance = Math.sqrt(dy * dy + dx * dx);\n\n    const dotClicked = distance < Math.floor(closestDot.state.radius * 1.5);\n\n    if (dotClicked) {\n      const differentDotClicked = this.state.startingDot !== null &&\n        this.state.startingDot?.state.id !== closestDot.state.id;\n\n      if (differentDotClicked) {\n\n        this.state.endingDot = closestDot;\n        return true;\n\n      } else if (!this.state.startingDot) {\n\n        this.state.startingDot = closestDot;\n        return true;\n      }\n      return false;\n\n    } else {\n\n      this.state.startingDot = null;\n      return false;\n    }\n  }\n\n  private getAvailableNeighbors() {\n    const { column, row } = this.state.startingDot.state;\n    const { connections } = this.state.startingDot.state;\n\n    let north: Dot;\n    if (!connections.north && row > 0) {\n      north = this.state.dots.get(`${Board.parseIdx(column)}${Board.parseIdx(row - 1)}`);\n    }\n\n    let east: Dot;\n    if (!connections.east  && column < this.state.columns - 1) {\n      east = this.state.dots.get(`${Board.parseIdx(column + 1)}${Board.parseIdx(row)}`);\n    }\n\n    let south: Dot;\n    if (!connections.south && row < this.state.rows - 1) {\n      south = this.state.dots.get(`${Board.parseIdx(column)}${Board.parseIdx(row + 1)}`);\n    }\n\n    let west: Dot;\n    if (!connections.west && column > 0) {\n      west = this.state.dots.get(`${Board.parseIdx(column - 1)}${Board.parseIdx(row)}`);\n    }\n\n    this.state.currentNeighbors = { north, east, south, west };\n  }\n\n  private makeConnections() {\n    let direction: string;\n    const neighbors = this.state.currentNeighbors;\n    if (neighbors.north?.state.id === this.state.endingDot?.state.id) {\n      direction = 'north';\n      this.state.startingDot.addConnection('north', this.state.endingDot);\n      this.state.endingDot.addConnection('south', this.state.startingDot);\n    }\n    if (neighbors.east?.state.id === this.state.endingDot?.state.id) {\n      direction = 'east';\n      this.state.startingDot.addConnection('east', this.state.endingDot);\n      this.state.endingDot.addConnection('west', this.state.startingDot);\n    }\n    if (neighbors.south?.state.id === this.state.endingDot?.state.id) {\n      direction = 'south';\n      this.state.startingDot.addConnection('south', this.state.endingDot);\n      this.state.endingDot.addConnection('north', this.state.startingDot);\n    }\n    if (neighbors.west?.state.id === this.state.endingDot?.state.id) {\n      direction = 'west';\n      this.state.startingDot.addConnection('west', this.state.endingDot);\n      this.state.endingDot.addConnection('east', this.state.startingDot);\n    }\n    this.detectFullSquare(direction);\n  }\n\n  private detectFullSquare(direction: string) {\n    if (direction === 'north' || direction === 'south') {\n      this.checkLeftSquare(direction);\n      this.checkRightSquare(direction);\n    } else if (direction === 'west' || direction === 'east') {\n      this.checkTopSquare(direction);\n      this.checkBottomSquare(direction);\n    }\n  }\n\n  private checkLeftSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.west && this.state.endingDot?.state.connections.west) {\n      const dot = this.state.startingDot.state.connections.west;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.west);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.west);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.west);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkRightSquare(direction: 'north' | 'south') {\n    if (this.state.startingDot?.state.connections.east && this.state.endingDot?.state.connections.east) {\n      const dot = this.state.startingDot.state.connections.east;\n      if (dot.state.connections[direction]) {\n        if (direction === 'north') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkTopSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.north && this.state.endingDot?.state.connections.north) {\n      const dot = this.state.startingDot.state.connections.north;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot.state.connections.north);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot.state.connections.north);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot.state.connections.north);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n  private checkBottomSquare(direction: 'west' | 'east') {\n    if (this.state.startingDot?.state.connections.south && this.state.endingDot?.state.connections.south) {\n      const dot = this.state.startingDot.state.connections.south;\n      if (dot.state.connections[direction]) {\n        if (direction === 'west') {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.endingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.endingDot);\n          }\n        } else {\n          if (this.state.currentPlayer.state.id === 0) {\n            this.state.players[0].state.squares.push(this.state.startingDot);\n          } else {\n            this.state.players[1].state.squares.push(this.state.startingDot);\n          }\n        }\n        this.state.totalSquaresLeft--;\n      }\n    }\n  }\n\n}\n","import { PlayerState } from '../interfaces/player-state';\n\nexport class Player {\n  state: PlayerState;\n\n  static playerBuilder(order: number, color: string, name?: string): Player {\n    const state: PlayerState = {\n      id: order - 1,\n      name: name ? name : `Player ${order}`,\n      color,\n      squares: []\n    };\n    return new Player(state);\n  }\n\n  constructor(state: PlayerState) {\n    this.state = state;\n  }\n}\n","import { Board } from './board';\nimport { Dot } from './dot';\nimport { Player } from './player';\n\nexport class Drawer {\n\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  highlightRadius = 16;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  draw(board: Board, renderAll: boolean) {\n    if (renderAll) {\n      this.clearCanvas();\n      this.drawPlayerBorder(board);\n      this.drawDots(board.state.dots);\n      this.fillSquares(board);\n    } else {\n      this.highlightDots(board);\n    }\n  }\n\n  setCanvas(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n  }\n\n  private highlightDots(board: Board) {\n    this.highlightClickedDot(board.state.startingDot);\n    this.highlightNeighbors(board);\n  }\n\n  private clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawPlayerBorder(board: Board) {\n    this.ctx.strokeStyle = board.state.currentPlayer.state.color;\n    this.ctx.lineWidth = 30;\n    this.ctx.strokeRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawDots(dots: Map<string, Dot>) {\n    dots.forEach(dot => {\n      this.drawDot(dot, false);\n      this.drawConnections(dot);\n    });\n  }\n\n  private drawDot(dot: Dot, highlight: boolean) {\n    if (highlight) {\n      this.ctx.fillStyle = 'pink';\n    } else {\n      this.ctx.fillStyle = 'black';\n    }\n\n    this.ctx.beginPath();\n    this.ctx.arc(dot.state.x, dot.state.y, dot.state.radius, 0, Math.PI * 2, true);\n    this.ctx.fill();\n  }\n\n  private drawConnections(dot: Dot) {\n    const { north, east, south, west } = dot.state.connections;\n\n    this.ctx.strokeStyle = 'black';\n    this.ctx.lineWidth = 6;\n    this.ctx.beginPath();\n    this.ctx.moveTo(dot.state.x, dot.state.y);\n    if (north) {\n      this.ctx.lineTo(north.state.x, north.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (east) {\n      this.ctx.lineTo(east.state.x, east.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (south) {\n      this.ctx.lineTo(south.state.x, south.state.y);\n      this.ctx.moveTo(dot.state.x, dot.state.y);\n    }\n    if (west) {\n      this.ctx.lineTo(west.state.x, west.state.y);\n    }\n    this.ctx.stroke();\n  }\n\n  private fillSquare(dot: Dot, player: Player, columnSpacing: number, rowSpacing: number) {\n    this.ctx.fillStyle = player.state.color;\n    this.ctx.fillRect(dot.state.x, dot.state.y, columnSpacing, rowSpacing);\n  }\n\n  private fillSquares(board: Board) {\n    const columnSpacing = board.state.columnSpacing;\n    const rowSpacing = board.state.rowSpacing;\n\n    const playerOne = board.state.players[0];\n    playerOne.state.squares.forEach(dot => {\n      this.fillSquare(dot, playerOne, columnSpacing, rowSpacing);\n    });\n\n    const playerTwo = board.state.players[1];\n    board.state.players[1].state.squares.forEach(dot => {\n      this.fillSquare(dot, playerTwo, columnSpacing, rowSpacing);\n    });\n  }\n\n  private highlightClickedDot(dot: Dot) {\n    this.drawDot(dot, true);\n  }\n\n  private highlightNeighbors(board: Board) {\n\n    const { north, east, south, west } = board.state.currentNeighbors;\n\n    this.ctx.strokeStyle = 'goldenrod';\n    this.ctx.lineWidth = 4;\n    this.ctx.beginPath();\n    if (north) {\n      this.ctx.arc(north.state.x, north.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (east) {\n      this.ctx.moveTo(east.state.x + this.highlightRadius, east.state.y);\n      this.ctx.arc(east.state.x, east.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (south) {\n      this.ctx.moveTo(south.state.x + this.highlightRadius, south.state.y);\n      this.ctx.arc(south.state.x, south.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    if (west) {\n      this.ctx.moveTo(west.state.x + this.highlightRadius, west.state.y);\n      this.ctx.arc(west.state.x, west.state.y, this.highlightRadius, 0, Math.PI * 2, true);\n    }\n    this.ctx.stroke();\n  }\n\n}\n","<div *ngIf=\"!gameStarted; else playing\" class=\"start-screen\">\n  <mat-card class=\"card\">\n    <mat-card-header>\n      <mat-card-title>Dots</mat-card-title>\n    </mat-card-header>\n    <mat-card-content *ngIf=\"!showingInformation; else information\">\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Number of Rows</mat-label>\n        <input matInput [(ngModel)]=\"rows\" placeholder=\"Rows\">\n        <mat-icon matSuffix>scatter_plot</mat-icon>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Number of Columns</mat-label>\n        <input matInput [(ngModel)]=\"columns\" placeholder=\"Columns\">\n        <mat-icon matSuffix>scatter_plot</mat-icon>\n      </mat-form-field>\n\n      <mat-card>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Player 1 Name</mat-label>\n          <input matInput [(ngModel)]=\"playerOneName\" placeholder=\"Enter Name\">\n          <mat-icon matSuffix>face</mat-icon>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Color</mat-label>\n          <mat-select [(value)]=\"playerOneColor\">\n            <mat-option>None</mat-option>\n            <mat-option *ngFor=\"let color of colors\" [value]=\"color\">{{ color }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-card>\n\n      <mat-card>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Player 2 Name</mat-label>\n          <input matInput [(ngModel)]=\"playerTwoName\" placeholder=\"Enter Name\">\n          <mat-icon matSuffix>face</mat-icon>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Color</mat-label>\n          <mat-select [(value)]=\"playerTwoColor\">\n            <mat-option>None</mat-option>\n            <mat-option *ngFor=\"let color of colors\" [value]=\"color\">{{ color }}</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </mat-card>\n\n    </mat-card-content>\n\n    <ng-template #information>\n      <mat-card-content>\n        <h3>Information</h3>\n        <ul>\n          <li>Connect dots to make squares</li>\n          <li>Making Squares gives you an extra turn</li>\n          <li>Person who makes the most squares wins</li>\n          <li>Press 'm' for the menu</li>\n        </ul>\n      </mat-card-content>\n    </ng-template>\n\n    <mat-card-actions>\n      <button mat-button (click)=\"startGame()\">PLAY</button>\n      <button mat-button (click)=\"toggleInformation()\">INSTRUCTIONS</button>\n      <button mat-button *ngIf=\"gameInitialized\" (click)=\"continueGame()\">CONTINUE</button>\n    </mat-card-actions>\n  </mat-card>\n\n</div>\n\n<ng-template #playing>\n  <canvas\n    #dots\n    class=\"canvas\"\n    (click)=\"handleClick($event)\">\n  </canvas>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DotsComponent } from './dots.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DotsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DotsRoutingModule { }\n","import { Component, ViewChild, ElementRef, AfterViewChecked, HostListener } from '@angular/core';\nimport { Board } from './objects/board';\nimport { Player } from './objects/player';\nimport { Drawer } from './objects/drawer';\n\n@Component({\n  selector: 'app-dots',\n  templateUrl: './dots.component.html',\n  styleUrls: ['./dots.component.scss'],\n})\nexport class DotsComponent implements AfterViewChecked {\n\n  @ViewChild('dots', { static: false })\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  gameStarted = false;\n  gameInitialized = false;\n  gameContinued = false;\n  showingInformation = false;\n\n  board: Board;\n  drawer: Drawer;\n  rows: number;\n  columns: number;\n  playerOneName: string;\n  playerOneColor: string;\n  playerTwoName: string;\n  playerTwoColor: string;\n  colors: string[] = ['red', 'blue', 'green', 'purple', 'orange'];\n\n  @HostListener('window:keydown', ['$event.key'])\n  onKeypress(btn: string) {\n    if (btn === 'm') {\n      this.gameStarted = false;\n    }\n  }\n\n  ngAfterViewChecked() {\n    if (this.gameStarted) {\n      if (!this.gameInitialized) {\n        this.initializeGame();\n      } else if (this.gameContinued) {\n        console.log(this.board);\n        this.reinitializeGame();\n      }\n    }\n  }\n\n  startGame() {\n    this.gameStarted = true;\n    this.gameInitialized = false;\n  }\n\n  continueGame() {\n    this.gameStarted = true;\n    this.gameContinued = true;\n  }\n\n  toggleInformation() {\n    this.showingInformation = !this.showingInformation;\n  }\n\n  initializeGame() {\n    this.setCanvasDimensions();\n    this.board = Board.boardBuilder(\n      this.rows > 3 ? this.rows : 6,\n      this.columns > 3 ? this.columns : 6,\n      this.canvas.nativeElement.width,\n      this.canvas.nativeElement.height,\n      this.buildPlayers()\n    );\n\n    this.drawer = new Drawer(this.canvas.nativeElement);\n    this.drawer.draw(this.board, true);\n    this.gameInitialized = true;\n  }\n\n  reinitializeGame() {\n    this.setCanvasDimensions();\n    this.drawer.setCanvas(this.canvas.nativeElement);\n    this.drawer.draw(this.board, true);\n    this.gameContinued = false;\n  }\n\n  handleClick(evt: MouseEvent): void {\n    this.board.handleClick(evt);\n    if (this.board.state.startingDot) {\n      this.drawer.draw(this.board, false);\n    } else {\n      this.drawer.draw(this.board, true);\n    }\n  }\n\n  finishGame() {\n    // TODO: Add UI for the game over screen\n    console.log('Game is over');\n  }\n\n  private setCanvasDimensions(): void {\n    this.canvas.nativeElement.width = innerWidth;\n    this.canvas.nativeElement.height = innerHeight - 40;\n  }\n\n  private buildPlayers(): Player[] {\n    const playerOne: Player = Player.playerBuilder(1, this.playerOneColor || 'blue', this.playerOneName);\n    const playerTwo: Player = Player.playerBuilder(2, this.playerTwoColor || 'red', this.playerTwoName);\n    return [playerOne, playerTwo];\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { DotsRoutingModule } from './dots-routing.module';\n\nimport { DotsComponent } from './dots.component';\n\n@NgModule({\n  declarations: [\n    DotsComponent\n  ],\n  imports: [\n    SharedModule,\n    DotsRoutingModule\n  ],\n  exports: [\n    DotsComponent\n  ]\n})\nexport class DotsModule { }\n"]}