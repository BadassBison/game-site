{"version":3,"sources":["webpack:///src/app/checkers/objects/board.ts","webpack:///src/app/checkers/objects/box.ts","webpack:///src/app/checkers/checkers.component.ts","webpack:///src/app/checkers/checkers.module.ts","webpack:///src/app/checkers/checkers-routing.module.ts","webpack:///src/app/checkers/objects/checker.ts","webpack:///src/app/shared/player/player.ts","webpack:///src/app/checkers/checkers.component.html"],"names":["Board","Box","CheckersComponent","CheckersModule","CheckersRoutingModule","Checker","state","this","newPoint","position","point","isKing","player","radius","color","colors","id","center","getCenter","x","y","cell","checker","checkerBuilder","Math","floor","width","empty","unplayableSpace","hasChecker","isOdd","side","row","column","playable","unPlayable","height","absoluteCenter","findAbsoluteCenterPointOfRectangle","relativeCenter","findRelativeCenterPointOfRectangle","players","rows","columns","boxes","Map","topPadding","sidePadding","playerOneCheckersRemaining","playerTwoCheckersRemaining","availableMoves","buildBoard","playerOne","playerTwo","boxCell","boxPoint","getBoxPosition","box","boxBuilder","boxSize","buildChecker","set","decreasePlayersCheckers","removeChecker","idx","get","boxArray","push","moves","findIndex","move","end","allMoves","getAllMoves","filterMoves","startBox","filteredMoves","jumpMoves","forEach","checkIfOpponentChecker","checkIfJumpIsPossible","jumpIdx","getJumpPosition","endBox","start","isJump","jumpedBox","concat","currentIdx","moveIdx","p1","p2","makeKing","currentMove","currentBox","setAvailableMoves","filter","length","calculateBoxSize","calculateTopPadding","calculateSidePadding","calculateBoxPositions","index","innerWidth","innerHeight","Player","playerState","order","name","numberOfPieces","routes","path","component","setProperties","setInitialState","getCheckerImageData","ctx","canvas","nativeElement","getContext","canvasPadding","playerBuilder","playerBarWidth","currentPlayer","holdingChecker","isPlaying","board","boardBuilder","halfBoxSize","refreshCanvas","checkerRadius","checkerImgPlayerOne","Image","src","drawCheckerImage","checkerImgPlayerTwo","checkerImgKingPlayerOne","checkerImgKingPlayerTwo","loadImages","setCanvasDimensions","draw","images","Promise","resolve","reject","img","onload","onerror","evt","boxIdx","getBoxIndex","clientX","clientY","getBox","availableMove","getAvailableMove","placeChecker","returnChecker","checkForValidChecker","pickUpChecker","lastBoxClicked","checkerCenter","getCheckerCenter","checkerHeld","updatePosition","additionalJumps","addChecker","removeCheckerFromBoard","checkForAdditionalJumps","checkIfKinged","checkForWin","console","log","changePlayer","resetAvailableMoves","checkerPosition","drawPlayerBar","drawBackground","drawBoard","drawHighlightedSpace","drawAvailableMoves","drawChecker","clearRect","fillStyle","fillRect","stroke","w","h","getBoxesArray","drawBox","drawImage","lineWidth","strokeStyle","strokeRect","color2","beginPath","arc","PI","fill","i","dif","moveTo","lineTo","toDataURL","handleClick","handleMouseMove","forChild"],"mappings":"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","file":"x","sourcesContent":["import { BoardState } from '../interfaces/board-state';\nimport { Box } from './box';\nimport { Move } from '../interfaces/move';\nimport { Player } from 'src/app/shared/player/player';\nimport { Cell } from 'src/app/shared/interfaces/cell';\nimport { Point } from 'src/app/shared/interfaces/point';\nimport { IPosition } from 'src/app/shared/interfaces/position';\n\nimport { Checker } from './checker';\n\nimport { UtilitiesService } from 'src/app/shared/utilities/utilities.service';\n\nexport class Board {\n  static rows = 8;\n  static columns = 8;\n  static boxSize: number;\n\n  state: BoardState;\n\n  static boardBuilder(players: Player[]): Board {\n    Board.boxSize = Board.calculateBoxSize();\n    const topPadding = Board.calculateTopPadding();\n    const sidePadding = Board.calculateSidePadding();\n\n    const state: BoardState = {\n      rows: Board.rows,\n      columns: Board.columns,\n      boxes: new Map<string, Box>(),\n      topPadding,\n      sidePadding,\n      playerOneCheckersRemaining: 12,\n      playerTwoCheckersRemaining: 12,\n      availableMoves: [],\n    };\n\n    const playerOne: Player = players[0];\n    const playerTwo: Player = players[1];\n\n    for (let row = 0; row < state.rows; row++){\n      for (let column = 0; column < state.columns; column++) {\n        const isOdd: boolean = UtilitiesService.isOdd(row + column);\n        const boxCell: Cell = { row, column };\n        const boxPoint: Point = Board.calculateBoxPositions(boxCell, state.topPadding, state.sidePadding);\n        const boxPosition: IPosition = { cell: boxCell, point: boxPoint };\n        const box: Box = Box.boxBuilder(isOdd, boxPosition, Board.boxSize);\n\n        if (isOdd) {\n          if (row < 3) {\n            box.buildChecker(playerOne);\n          } else if (row > 4) {\n            box.buildChecker(playerTwo);\n          }\n        }\n        state.boxes.set(`${row}${column}`, box);\n      }\n    }\n    return new Board(state);\n  }\n\n  static calculateBoxPositions(index: Cell, topPadding: number, sidePadding: number): Point {\n    const x = index.column * Board.boxSize + sidePadding;\n    const y = index.row * Board.boxSize + topPadding;\n    return { x, y };\n  }\n\n  static calculateBoxSize(): number {\n    if (innerWidth > innerHeight) {\n      return (innerHeight) / (Board.rows + 2);\n    } else {\n      return (innerWidth) / (Board.rows + 2);\n    }\n  }\n\n  static calculateTopPadding(): number {\n    if (innerWidth > innerHeight) {\n      return Board.boxSize;\n    } else {\n      const boardSize = Board.boxSize * 8;\n      return (innerHeight - boardSize) / 2;\n    }\n  }\n\n  static calculateSidePadding(): number {\n    if (innerWidth > innerHeight) {\n      const boardSize = Board.boxSize * 8;\n      return (innerWidth - boardSize) / 2;\n    } else {\n      return Board.boxSize;\n    }\n  }\n\n  constructor(state: BoardState) {\n    this.state = state;\n  }\n\n  setupBoardState(players: Player[]): void {\n    this.state = {\n      rows: 8,\n      columns: 8,\n      boxes: new Map<string, Box>(),\n      topPadding: null,\n      sidePadding: null,\n      playerOneCheckersRemaining: 12,\n      playerTwoCheckersRemaining: 12,\n      availableMoves: null,\n    };\n\n    this.buildBoard(players);\n    this.state.availableMoves = [];\n  }\n\n  buildBoard(players: Player[]) {\n    const playerOne: Player = players[0];\n    const playerTwo: Player = players[1];\n    this.state.boxes = new Map<string, Box>();\n\n    for (let row = 0; row < this.state.rows; row++){\n      for (let column = 0; column < this.state.columns; column++) {\n        const isOdd: boolean = UtilitiesService.isOdd(row + column);\n        const boxCell: Cell = { row, column };\n        const boxPoint: Point = this.getBoxPosition(row, column);\n        const boxPosition: IPosition = { cell: boxCell, point: boxPoint };\n        const box = Box.boxBuilder(isOdd, boxPosition, Board.boxSize);\n\n        if (isOdd) {\n          if (row < 3) {\n            box.buildChecker(playerOne);\n          } else if (row > 4) {\n            box.buildChecker(playerTwo);\n          }\n        }\n        this.state.boxes.set(`${row}${column}`, box);\n      }\n    }\n  }\n\n  removeCheckerFromBoard(box: Box): void {\n    this.decreasePlayersCheckers(box.state.checker as Checker);\n    box.removeChecker();\n  }\n\n  decreasePlayersCheckers(checker: Checker): void {\n    const player = checker.state.player.state.id;\n\n    if (player === 0) {\n      this.state.playerOneCheckersRemaining--;\n    } else {\n      this.state.playerTwoCheckersRemaining--;\n    }\n  }\n\n  getBox(idx: Cell): Box {\n    return this.state.boxes.get(`${idx.row}${idx.column}`);\n  }\n\n  getBoxPosition(row: number, column: number): Point {\n    const x = column * Board.boxSize + this.state.sidePadding;\n    const y = row * Board.boxSize + Board.boxSize;\n    return { x, y };\n  }\n\n  getBoxIndex(x: number, y: number): Cell {\n    const row = Math.floor((y - this.state.topPadding - 40) / Board.boxSize);\n    const column = Math.floor((x - this.state.sidePadding) / Board.boxSize);\n    return { row, column };\n  }\n\n  getBoxesArray(): Box[] {\n    const boxArray: Box[] = [];\n    for (let row = 0; row < this.state.rows; row++) {\n      for (let column = 0; column < this.state.columns; column++) {\n        boxArray.push(this.state.boxes.get(`${row}${column}`));\n      }\n    }\n    return boxArray;\n  }\n\n  resetAvailableMoves(): void {\n    this.state.availableMoves = [];\n  }\n\n  getAllMoves(box: Box): Box[] {\n    const { isKing, player } = (box.state.checker as Checker).state;\n    const moves: Box[] = [];\n    const { row, column } = box.state.position.cell;\n\n    if (player.state.id === 1 || isKing) {\n      if (row > 0 && column > 0) {\n        moves.push(this.state.boxes.get(`${row - 1}${column -  1}`));\n      }\n      if (row > 0 && column < this.state.columns - 1) {\n        moves.push(this.state.boxes.get(`${row - 1}${column + 1}`));\n      }\n    }\n    if (player.state.id === 0 || isKing) {\n      if (row < this.state.rows - 1 && column > 0) {\n        moves.push(this.state.boxes.get(`${row + 1}${column - 1}`));\n      }\n      if (row < this.state.rows - 1 && column < this.state.columns - 1) {\n        moves.push(this.state.boxes.get(`${row + 1}${column + 1}`));\n      }\n    }\n\n    return moves;\n  }\n\n  getAvailableMove(box: Box): Move {\n    const idx = this.state.availableMoves.findIndex((move: Move) => {\n      // FIXME: does this check object equality\n      return move.end.state.position.cell === box.state.position.cell;\n    });\n    return this.state.availableMoves[idx];\n  }\n\n  setAvailableMoves(box: Box): void {\n    const allMoves: Box[] = this.getAllMoves(box);\n    this.state.availableMoves = this.filterMoves(box, allMoves);\n  }\n\n  filterMoves(startBox: Box, moves: Box[]): Move[] {\n    const filteredMoves: Move[] = [];\n    const jumpMoves: Move[] = [];\n    const { player } = (startBox.state.checker as Checker).state;\n\n    moves.forEach((move: Box) => {\n\n      if (move.hasChecker()) {\n        const isOpponentChecker: boolean = this.checkIfOpponentChecker(move, player.state.id);\n\n        if (isOpponentChecker) {\n          const isJumpPossible: boolean = this.checkIfJumpIsPossible(startBox.state.position.cell, move.state.position.cell);\n\n          if (isJumpPossible) {\n            const jumpIdx: Cell = this.getJumpPosition(startBox.state.position.cell, move.state.position.cell);\n            const endBox = this.state.boxes.get(`${jumpIdx.row}${jumpIdx.column}`);\n            const jumpMove: Move = { start: startBox, end: endBox, isJump: true, jumpedBox: move };\n            jumpMoves.push(jumpMove);\n          }\n        }\n      } else {\n        filteredMoves.push({ start: startBox, end: move, isJump: false, jumpedBox: null });\n      }\n    });\n\n    return jumpMoves.concat(filteredMoves);\n  }\n\n  checkIfOpponentChecker(move: Box, player: number): boolean {\n    const checker: Checker = (move.state.checker as Checker);\n    return player !== checker.state.player.state.id;\n  }\n\n  checkIfJumpIsPossible(currentIdx: Cell, moveIdx: Cell): boolean {\n\n    const { row, column }: Cell = this.getJumpPosition(currentIdx, moveIdx);\n    if (row < 0 || row >= 8 || column < 0 || column >= 8) { return false; }\n\n    const box: Box = this.state.boxes.get(`${row}${column}`);\n    const isBoxEmpty: boolean = !box.hasChecker();\n    return isBoxEmpty;\n  }\n\n  getJumpPosition(p1: Cell, p2: Cell): Cell {\n    const dx = p1.column - p2.column;\n    const dy = p1.row - p2.row;\n    return { row: p2.row - dy, column: p2.column - dx };\n  }\n\n  checkForWin(player: number): boolean {\n    if (player === 0) {\n      return this.state.playerTwoCheckersRemaining === 0;\n    } else {\n      return this.state.playerOneCheckersRemaining === 0;\n    }\n  }\n\n  checkIfKinged(player: number, row: number, checker: Checker) {\n    if (player === 0 && row === this.state.rows - 1) {\n      checker.makeKing();\n    } else if (player === 1 && row === 0) {\n      checker.makeKing();\n    }\n  }\n\n  checkForAdditionalJumps(currentMove: Move): boolean {\n    const currentBox: Box = currentMove.end;\n    this.setAvailableMoves(currentBox);\n    const jumpMoves: Move[] = this.state.availableMoves.filter((move: Move) => {\n      return move.isJump;\n    });\n\n    if (jumpMoves.length > 0) {\n      this.state.availableMoves = jumpMoves;\n      this.state.availableMoves.push({start: currentBox, end: currentBox, isJump: false, jumpedBox: null});\n      return true;\n    }\n    return false;\n  }\n\n}\n","import { BoxState } from '../interfaces/box-state';\nimport { Checker } from './checker';\nimport { Player } from 'src/app/shared/player/player';\nimport { IPosition } from 'src/app/shared/interfaces/position';\nimport { UtilitiesService } from 'src/app/shared/utilities/utilities.service';\n\nexport class Box {\n  static colors = {\n    playable: 'palegreen',\n    unPlayable: 'darkgray'\n  };\n  static readonly empty: string = 'empty';\n  static readonly unplayableSpace: string = 'unplayable space';\n\n  state: BoxState;\n\n  static boxBuilder(isOdd: boolean, position: IPosition, side: number): Box {\n    const state: BoxState = {\n      id: `${position.cell.row}${position.cell.column}`,\n      color: isOdd ? Box.colors.playable : Box.colors.unPlayable,\n      checker: isOdd ? Box.empty : Box.unplayableSpace,\n      position,\n      width: side,\n      height: side,\n      absoluteCenter: UtilitiesService.findAbsoluteCenterPointOfRectangle(position, side, side),\n      relativeCenter: UtilitiesService.findRelativeCenterPointOfRectangle(side, side)\n    };\n    return new Box(state);\n  }\n\n  constructor(state: BoxState) {\n    this.state = state;\n  }\n\n  buildChecker(player: Player) {\n    const { cell, point } = this.state.position;\n    this.state.checker = Checker.checkerBuilder(player, { cell, point }, Math.floor(this.state.width * .46));\n  }\n\n  hasChecker(): boolean {\n    return (this.state.checker !== Box.empty && this.state.checker !== Box.unplayableSpace);\n  }\n\n  addChecker(checker: Checker): void {\n    checker.state.position.cell = this.state.position.cell;\n    checker.state.position.point = this.state.position.point;\n    this.state.checker = checker;\n  }\n\n  removeChecker(): void {\n    this.state.checker = Box.empty;\n  }\n\n  checkForValidChecker(player: Player): boolean {\n    if (this.hasChecker()) {\n      const checker: Checker = this.state.checker as Checker;\n      return player.state.id === checker.state.player.state.id;\n    }\n    return false;\n  }\n\n}\n","import { Component, ElementRef, ViewChild, AfterViewInit, OnInit } from '@angular/core';\nimport { Board } from './objects/board';\nimport { Player } from '../shared/player/player';\nimport { Checker } from './objects/checker';\nimport { Box } from './objects/box';\nimport { Move } from './interfaces/move';\nimport { Point } from '../shared/interfaces/point';\n\n@Component({\n  selector: 'app-checkers',\n  templateUrl: 'checkers.component.html',\n  styleUrls: ['checkers.component.scss']\n})\nexport class CheckersComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('checkers', { static: true })\n  canvas: ElementRef<HTMLCanvasElement>;\n  canvasPadding: number;\n\n  private colors = {\n    playerOne: 'dodgerblue',\n    playerTwo: 'goldenrod'\n  };\n\n  private ctx: CanvasRenderingContext2D;\n  private board: Board;\n  private playerOne: Player;\n  private playerTwo: Player;\n  private currentPlayer: Player;\n  private holdingChecker: boolean;\n  private checkerHeld: Checker;\n  private halfBoxSize: number;\n  private lastBoxClicked: Box;\n  private isPlaying: boolean;\n  private checkerImgPlayerOne: HTMLImageElement;\n  private checkerImgPlayerTwo: HTMLImageElement;\n  private checkerImgKingPlayerOne: HTMLImageElement;\n  private checkerImgKingPlayerTwo: HTMLImageElement;\n  private playerBarWidth: number;\n\n  constructor() {}\n\n  ngOnInit() {\n    this.setProperties();\n    this.setInitialState();\n  }\n\n  ngAfterViewInit() {\n    this.getCheckerImageData();\n  }\n\n  // Does not change from game to game\n  setProperties() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n    this.canvasPadding = 40;\n  }\n\n  // Changes from game to game\n  setInitialState() {\n\n    this.playerOne = Player.playerBuilder(1, this.colors.playerOne);\n    this.playerTwo = Player.playerBuilder(2, this.colors.playerTwo);\n    this.playerBarWidth = 20;\n    this.currentPlayer = this.playerOne;\n    this.holdingChecker = false;\n    this.isPlaying = true;\n    this.board = Board.boardBuilder([this.playerOne, this.playerTwo]);\n    this.halfBoxSize = Board.boxSize * .5;\n  }\n\n  setCanvasDimensions(): void {\n    this.canvas.nativeElement.width = innerWidth;\n    this.canvas.nativeElement.height = innerHeight - this.canvasPadding;\n  }\n\n  async getCheckerImageData(): Promise<void> {\n    const x = this.halfBoxSize;\n    const y = this.halfBoxSize;\n    const checkerRadius = Board.boxSize * 0.46;\n\n    this.canvas.nativeElement.width = Board.boxSize;\n    this.canvas.nativeElement.height = Board.boxSize;\n\n    this.checkerImgPlayerOne = new Image();\n    this.checkerImgPlayerOne.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerOne, false);\n\n    this.checkerImgPlayerTwo = new Image();\n    this.checkerImgPlayerTwo.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerTwo, false);\n\n    this.checkerImgKingPlayerOne = new Image();\n    this.checkerImgKingPlayerOne.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerOne, true);\n\n    this.checkerImgKingPlayerTwo = new Image();\n    this.checkerImgKingPlayerTwo.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerTwo, true);\n\n    this.refreshCanvas();\n\n    await this.loadImages([\n      this.checkerImgPlayerOne,\n      this.checkerImgPlayerTwo,\n      this.checkerImgKingPlayerOne,\n      this.checkerImgKingPlayerTwo\n    ]);\n\n    this.setCanvasDimensions();\n    this.draw();\n  }\n\n  async loadImages(images: HTMLImageElement[]) {\n    return new Promise((resolve, reject) => {\n      for (const img of images) {\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n      }\n    });\n  }\n\n  getCheckerCenter(x: number, y: number): Point {\n    x = x - this.halfBoxSize;\n    y = y - 2 * this.halfBoxSize;\n    return { x, y };\n  }\n\n  handleClick(evt: MouseEvent): void {\n\n    if (this.isPlaying) {\n      const boxIdx = this.board.getBoxIndex(evt.clientX, evt.clientY);\n      const box = this.board.getBox(boxIdx);\n\n      if (box) {\n\n        if (this.holdingChecker) {\n          const availableMove: Move = this.board.getAvailableMove(box);\n\n          if (availableMove) {\n            this.placeChecker(availableMove);\n          } else {\n            this.returnChecker();\n          }\n        } else {\n          const hasChecker = box.checkForValidChecker(this.currentPlayer);\n\n          if (hasChecker) {\n            this.board.setAvailableMoves(box);\n\n            const hasAvailableMoves = this.board.state.availableMoves.length > 0;\n            if (hasAvailableMoves) { this.pickUpChecker(box); }\n          }\n          this.lastBoxClicked = box;\n        }\n        this.draw();\n      }\n    }\n  }\n\n  handleMouseMove(evt: MouseEvent): void {\n    if (this.holdingChecker) {\n      const checkerCenter: Point = this.getCheckerCenter(evt.clientX, evt.clientY);\n      this.checkerHeld.updatePosition(checkerCenter);\n      this.draw();\n    }\n  }\n\n  pickUpChecker(box: Box): void {\n    this.holdingChecker = true;\n    this.checkerHeld = box.state.checker as Checker;\n    box.removeChecker();\n  }\n\n  placeChecker(move: Move) {\n    const player = this.currentPlayer.state.id;\n    const row = move.end.state.position.cell.row;\n    move.end.addChecker(this.checkerHeld);\n\n    let additionalJumps: boolean;\n\n    if (move.isJump) {\n      this.board.removeCheckerFromBoard(move.jumpedBox);\n      additionalJumps = this.board.checkForAdditionalJumps(move);\n    }\n\n    if (additionalJumps) {\n\n      this.pickUpChecker(move.end);\n\n    } else {\n\n      if (!this.checkerHeld.state.isKing) {\n        this.board.checkIfKinged(player, row, this.checkerHeld);\n      }\n\n      const isWin = this.board.checkForWin(this.currentPlayer.state.id);\n\n      if (isWin) {\n        this.isPlaying = false;\n        console.log(`Player ${this.currentPlayer.state.id + 1} wins!`);\n      }\n\n      this.changePlayer();\n      this.board.resetAvailableMoves();\n      this.holdingChecker = false;\n      this.checkerHeld = null;\n    }\n  }\n\n  returnChecker() {\n    const { x, y } = this.lastBoxClicked.state.absoluteCenter;\n    const checkerPosition = this.getCheckerCenter(x, y);\n    this.checkerHeld.updatePosition(checkerPosition);\n    this.lastBoxClicked.addChecker(this.checkerHeld);\n    this.board.resetAvailableMoves();\n    this.holdingChecker = false;\n    this.checkerHeld = null;\n  }\n\n  changePlayer(): void {\n    if (this.currentPlayer.state.id === 0) {\n      this.currentPlayer = this.playerTwo;\n    } else {\n      this.currentPlayer = this.playerOne;\n    }\n  }\n\n  draw(): void {\n    this.refreshCanvas();\n    this.drawPlayerBar();\n    this.drawBackground();\n    this.drawBoard();\n\n    if (this.board.state.availableMoves.length > 0) {\n      this.drawHighlightedSpace();\n      this.drawAvailableMoves();\n    }\n    if (this.holdingChecker) { this.drawChecker(this.checkerHeld); }\n  }\n\n  refreshCanvas() {\n    this.ctx.clearRect(0, 0, innerWidth, innerHeight - (2 * this.canvasPadding));\n  }\n\n  drawPlayerBar() {\n    this.ctx.fillStyle = this.currentPlayer.state.color;\n    this.ctx.fillRect(0, 0, innerWidth, innerHeight - (this.canvasPadding));\n  }\n\n  drawBackground() {\n    const stroke = this.playerBarWidth;\n    const x = stroke;\n    const y = stroke;\n    const w = this.canvas.nativeElement.width - (2 * stroke);\n    const h = this.canvas.nativeElement.height - (2 * stroke);\n\n    this.ctx.fillStyle = 'ivory';\n    this.ctx.fillRect(x, y, w, h);\n  }\n\n  drawBoard() {\n    const boxes = this.board.getBoxesArray();\n\n    boxes.forEach(box => {\n      this.drawBox(box);\n\n      if (box.hasChecker()) {\n        const checker = box.state.checker as Checker;\n        this.drawChecker(checker);\n      }\n    });\n  }\n\n  drawChecker(checker: Checker) {\n\n    const { x, y } = checker.state.position.point;\n\n    if (checker.state.player.state.id === 0) {\n\n      if (checker.state.isKing) {\n        this.ctx.drawImage(this.checkerImgKingPlayerOne, x, y);\n      } else {\n        this.ctx.drawImage(this.checkerImgPlayerOne, x, y);\n      }\n    } else {\n      if (checker.state.isKing) {\n        this.ctx.drawImage(this.checkerImgKingPlayerTwo, x, y);\n      } else {\n        this.ctx.drawImage(this.checkerImgPlayerTwo, x, y);\n      }\n    }\n  }\n\n  drawBox(box: Box) {\n    const { color, width, height } = box.state;\n    const { x, y } = box.state.position.point;\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x, y, width, height);\n\n    this.ctx.lineWidth = 0.5;\n    this.ctx.strokeStyle = 'black';\n    this.ctx.strokeRect(x, y, width, height);\n  }\n\n  drawCheckerImage(x: number, y: number, radius: number, color: string, isKing: boolean) {\n    const color2 = color === this.colors.playerOne ? 'deepskyblue' : 'gold';\n\n    // Outer Circle\n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius, 0, 2 * Math.PI, true);\n    this.ctx.fill();\n\n    // Outer Grooves\n    this.ctx.strokeStyle = color2;\n    this.ctx.lineWidth = Board.boxSize * .05;\n\n    for (let i = 0; i < 2 * Math.PI; i += 0.18) {\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius - 4, i, i + 0.04, false);\n      this.ctx.stroke();\n    }\n\n    // Inner Circle\n    this.ctx.fillStyle = color2;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius - 10, 0, 2 * Math.PI, true);\n    this.ctx.fill();\n\n    // Inner Crown\n    if (isKing) {\n      this.ctx.strokeStyle = color;\n      this.ctx.lineWidth = Board.boxSize * .05;\n      const dif = Board.boxSize / 95;\n      this.ctx.beginPath();\n      this.ctx.moveTo(x + 16 * dif, y + 15 * dif);\n      this.ctx.lineTo(x - 15 * dif, y + 15 * dif);\n      this.ctx.lineTo(x - 20 * dif, y - 10 * dif);\n      this.ctx.lineTo(x - 10 * dif, y           );\n      this.ctx.lineTo(x,            y - 20 * dif);\n      this.ctx.lineTo(x + 10 * dif, y           );\n      this.ctx.lineTo(x + 20 * dif, y - 10 * dif);\n      this.ctx.lineTo(x + 15 * dif, y + 15 * dif);\n    }\n\n    this.ctx.stroke();\n\n    return this.canvas.nativeElement.toDataURL('image/webp') as string;\n  }\n\n  drawHighlightedSpace() {\n    const { x, y } = this.lastBoxClicked.state.position.point;\n    const { width, height } = this.lastBoxClicked.state;\n\n    this.ctx.fillStyle = 'white';\n    this.ctx.fillRect(x, y, width, height);\n  }\n\n  drawAvailableMoves() {\n    this.ctx.lineWidth = 6;\n\n    this.board.state.availableMoves.forEach((move: Move) => {\n      const { x, y } = move.end.state.position.point;\n      const { width, height } = move.end.state;\n\n      this.ctx.strokeStyle = 'yellow';\n      this.ctx.strokeRect(x, y, width, height);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { CheckersRoutingModule } from './checkers-routing.module';\n\nimport { CheckersComponent } from './checkers.component';\n\n@NgModule({\n  declarations: [\n    CheckersComponent\n  ],\n  imports: [\n    SharedModule,\n    CheckersRoutingModule\n  ],\n  exports: [\n    CheckersComponent\n  ]\n})\nexport class CheckersModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CheckersComponent } from './checkers.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CheckersComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CheckersRoutingModule { }\n","import { CheckerState } from '../interfaces/checker-state';\nimport { Player } from 'src/app/shared/player/player';\nimport { IPosition } from 'src/app/shared/interfaces/position';\nimport { Point } from 'src/app/shared/interfaces/point';\n\nexport class Checker {\n  static colors: string[] = ['dodgerblue', 'goldenrod'];\n\n  state: CheckerState;\n\n  static checkerBuilder(player: Player, position: IPosition, radius: number): Checker {\n    const state: CheckerState = {\n      color: Checker.colors[player.state.id],\n      player,\n      position,\n      radius,\n      isKing: false,\n      center: Checker.getCenter(position, radius)\n    };\n    return new Checker(state);\n  }\n\n  static getCenter(position: IPosition, radius: number): Point {\n    const x = position.point.x + radius;\n    const y = position.point.y + radius;\n    return { x, y };\n  }\n\n  constructor(state: CheckerState) {\n    this.state = state;\n  }\n\n\n  updatePosition(newPoint: Point): void {\n    this.state.position.point = newPoint;\n  }\n\n  makeKing(): void {\n    this.state.isKing = true;\n  }\n}\n","import { PlayerState } from './playerState';\n\nexport class Player {\n  state: PlayerState;\n\n  static playerBuilder(order: number, color: string): Player {\n    const state: PlayerState = {\n      id: order - 1,\n      name: `Player ${order}`,\n      color,\n      numberOfPieces: 16\n    };\n    return new Player(state);\n  }\n\n  constructor(playerState: PlayerState) {\n    this.state = playerState;\n  }\n}\n","<canvas #checkers class=\"canvas\" (click)=\"handleClick($event)\" (mousemove)=\"handleMouseMove($event)\"></canvas>\n<!-- <button>Rotate</button> -->\n"]}