{"version":3,"sources":["webpack:///src/app/games/checkers/objects/checker.ts","webpack:///src/app/games/checkers/objects/box.ts","webpack:///src/app/games/checkers/objects/board.ts","webpack:///src/app/games/checkers/objects/player.ts","webpack:///src/app/games/checkers/checkers-routing.module.ts","webpack:///src/app/games/checkers/checkers.component.ts","webpack:///src/app/games/checkers/checkers.component.html","webpack:///src/app/games/checkers/checkers.module.ts"],"names":["Checker","state","this","player","position","radius","color","colors","id","isKing","center","getCenter","x","point","y","newPoint","Box","isOdd","side","cell","row","column","playable","unPlayable","checker","empty","unplayableSpace","width","height","absoluteCenter","findAbsoluteCenterPointOfRectangle","relativeCenter","findRelativeCenterPointOfRectangle","checkerBuilder","Math","floor","hasChecker","Board","players","boxSize","calculateBoxSize","topPadding","calculateTopPadding","sidePadding","calculateSidePadding","rows","columns","boxes","Map","playerOneCheckersRemaining","playerTwoCheckersRemaining","availableMoves","playerOne","playerTwo","boxCell","boxPoint","calculateBoxPositions","box","boxBuilder","buildChecker","set","index","innerWidth","innerHeight","buildBoard","getBoxPosition","decreasePlayersCheckers","removeChecker","idx","get","boxArray","push","moves","findIndex","move","end","allMoves","getAllMoves","filterMoves","startBox","filteredMoves","jumpMoves","forEach","checkIfOpponentChecker","checkIfJumpIsPossible","jumpIdx","getJumpPosition","endBox","start","isJump","jumpedBox","concat","currentIdx","moveIdx","p1","p2","makeKing","currentMove","currentBox","setAvailableMoves","filter","length","Player","playerState","order","name","numberOfPieces","routes","path","component","CheckersComponent","setProperties","setInitialState","getCheckerImageData","ctx","canvas","nativeElement","getContext","canvasPadding","playerBuilder","playerBarWidth","currentPlayer","holdingChecker","isPlaying","board","boardBuilder","halfBoxSize","canvasRotated","checkerRadius","checkerImgPlayerOne","Image","src","drawCheckerImage","checkerImgPlayerTwo","checkerImgKingPlayerOne","checkerImgKingPlayerTwo","refreshCanvas","loadImages","setCanvasDimensions","draw","images","Promise","resolve","reject","img","onload","onerror","evt","boxIdx","getBoxIndex","clientX","clientY","getBox","availableMove","getAvailableMove","placeChecker","returnChecker","checkForValidChecker","pickUpChecker","lastBoxClicked","checkerCenter","getCheckerCenter","checkerHeld","updatePosition","additionalJumps","addChecker","removeCheckerFromBoard","checkForAdditionalJumps","checkIfKinged","checkForWin","console","log","changePlayer","resetAvailableMoves","checkerPosition","rotateBoard","complementValue","currentChecker","complementBox","complementChecker","setTimeout","changeCheckerPositions","drawPlayerBar","drawBackground","drawBoard","drawHighlightedSpace","drawAvailableMoves","drawChecker","clearRect","fillStyle","fillRect","stroke","w","h","getBoxesArray","drawBox","drawImage","lineWidth","strokeStyle","strokeRect","color2","beginPath","arc","PI","fill","i","dif","moveTo","lineTo","toDataURL","handleClick","handleMouseMove","transform","CheckersRoutingModule","forChild","CheckersModule"],"mappings":"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","file":"x","sourcesContent":["import { CheckerState } from '../interfaces/checker-state';\nimport { Player } from './player';\nimport { IPosition } from 'src/app/shared/interfaces/position';\nimport { Point } from 'src/app/shared/interfaces/point';\n\nexport class Checker {\n  static colors: string[] = ['dodgerblue', 'goldenrod'];\n\n  state: CheckerState;\n\n  static checkerBuilder(player: Player, position: IPosition, radius: number): Checker {\n    const state: CheckerState = {\n      color: Checker.colors[player.state.id],\n      player,\n      position,\n      radius,\n      isKing: false,\n      center: Checker.getCenter(position, radius)\n    };\n    return new Checker(state);\n  }\n\n  static getCenter(position: IPosition, radius: number): Point {\n    const x = position.point.x + radius;\n    const y = position.point.y + radius;\n    return { x, y };\n  }\n\n  constructor(state: CheckerState) {\n    this.state = state;\n  }\n\n\n  updatePosition(newPoint: Point): void {\n    this.state.position.point = newPoint;\n  }\n\n  makeKing(): void {\n    this.state.isKing = true;\n  }\n}\n","import { BoxState } from '../interfaces/box-state';\nimport { Checker } from './checker';\nimport { Player } from './player';\nimport { IPosition } from 'src/app/shared/interfaces/position';\nimport { UtilitiesService } from 'src/app/shared/utilities/utilities.service';\n\nexport class Box {\n  static colors = {\n    playable: 'palegreen',\n    unPlayable: 'darkgray'\n  };\n  static readonly empty: string = 'empty';\n  static readonly unplayableSpace: string = 'unplayable space';\n\n  state: BoxState;\n\n  static boxBuilder(isOdd: boolean, position: IPosition, side: number): Box {\n    const state: BoxState = {\n      id: `${position.cell.row}${position.cell.column}`,\n      color: isOdd ? Box.colors.playable : Box.colors.unPlayable,\n      checker: isOdd ? Box.empty : Box.unplayableSpace,\n      position,\n      width: side,\n      height: side,\n      absoluteCenter: UtilitiesService.findAbsoluteCenterPointOfRectangle(position, side, side),\n      relativeCenter: UtilitiesService.findRelativeCenterPointOfRectangle(side, side)\n    };\n    return new Box(state);\n  }\n\n  constructor(state: BoxState) {\n    this.state = state;\n  }\n\n  buildChecker(player: Player) {\n    const { cell, point } = this.state.position;\n    this.state.checker = Checker.checkerBuilder(player, { cell, point }, Math.floor(this.state.width * .46));\n  }\n\n  hasChecker(): boolean {\n    return (this.state.checker !== Box.empty && this.state.checker !== Box.unplayableSpace);\n  }\n\n  addChecker(checker: Checker): void {\n    checker.state.position.cell = this.state.position.cell;\n    checker.state.position.point = this.state.position.point;\n    this.state.checker = checker;\n  }\n\n  removeChecker(): void {\n    this.state.checker = Box.empty;\n  }\n\n  checkForValidChecker(player: Player): boolean {\n    if (this.hasChecker()) {\n      const checker: Checker = this.state.checker as Checker;\n      return player.state.id === checker.state.player.state.id;\n    }\n    return false;\n  }\n\n}\n","import { BoardState } from '../interfaces/board-state';\nimport { Box } from './box';\nimport { Move } from '../interfaces/move';\nimport { Player } from './player';\nimport { Cell } from 'src/app/shared/interfaces/cell';\nimport { Point } from 'src/app/shared/interfaces/point';\nimport { IPosition } from 'src/app/shared/interfaces/position';\n\nimport { Checker } from './checker';\n\nimport { UtilitiesService } from 'src/app/shared/utilities/utilities.service';\n\nexport class Board {\n  static rows = 8;\n  static columns = 8;\n  static boxSize: number;\n\n  state: BoardState;\n\n  static boardBuilder(players: Player[]): Board {\n    Board.boxSize = Board.calculateBoxSize();\n    const topPadding = Board.calculateTopPadding();\n    const sidePadding = Board.calculateSidePadding();\n\n    const state: BoardState = {\n      rows: Board.rows,\n      columns: Board.columns,\n      boxes: new Map<string, Box>(),\n      topPadding,\n      sidePadding,\n      playerOneCheckersRemaining: 12,\n      playerTwoCheckersRemaining: 12,\n      availableMoves: [],\n    };\n\n    const playerOne: Player = players[0];\n    const playerTwo: Player = players[1];\n\n    for (let row = 0; row < state.rows; row++){\n      for (let column = 0; column < state.columns; column++) {\n        const isOdd: boolean = UtilitiesService.isOdd(row + column);\n        const boxCell: Cell = { row, column };\n        const boxPoint: Point = Board.calculateBoxPositions(boxCell, state.topPadding, state.sidePadding);\n        const boxPosition: IPosition = { cell: boxCell, point: boxPoint };\n        const box: Box = Box.boxBuilder(isOdd, boxPosition, Board.boxSize);\n\n        if (isOdd) {\n          if (row < 3) {\n            box.buildChecker(playerTwo);\n          } else if (row > 4) {\n            box.buildChecker(playerOne);\n          }\n        }\n        state.boxes.set(`${row}${column}`, box);\n      }\n    }\n    return new Board(state);\n  }\n\n  static calculateBoxPositions(index: Cell, topPadding: number, sidePadding: number): Point {\n    const x = index.column * Board.boxSize + sidePadding;\n    const y = index.row * Board.boxSize + topPadding;\n    return { x, y };\n  }\n\n  static calculateBoxSize(): number {\n    if (innerWidth > innerHeight) {\n      return innerHeight / (Board.rows + 2);\n    } else {\n      return innerWidth / (Board.rows + 2);\n    }\n  }\n\n  static calculateTopPadding(): number {\n    if (innerWidth > innerHeight) {\n      return Board.boxSize - 20;\n    } else {\n      const boardSize = Board.boxSize * 8;\n      return (innerHeight - boardSize) / 2 - 20;\n    }\n  }\n\n  static calculateSidePadding(): number {\n    if (innerWidth > innerHeight) {\n      const boardSize = Board.boxSize * 8;\n      return (innerWidth - boardSize) / 2;\n    } else {\n      return Board.boxSize;\n    }\n  }\n\n  constructor(state: BoardState) {\n    this.state = state;\n  }\n\n  setupBoardState(players: Player[]): void {\n    this.state = {\n      rows: 8,\n      columns: 8,\n      boxes: new Map<string, Box>(),\n      topPadding: null,\n      sidePadding: null,\n      playerOneCheckersRemaining: 12,\n      playerTwoCheckersRemaining: 12,\n      availableMoves: null,\n    };\n\n    this.buildBoard(players);\n    this.state.availableMoves = [];\n  }\n\n  buildBoard(players: Player[]) {\n    const playerOne: Player = players[0];\n    const playerTwo: Player = players[1];\n    this.state.boxes = new Map<string, Box>();\n\n    for (let row = 0; row < this.state.rows; row++){\n      for (let column = 0; column < this.state.columns; column++) {\n        const isOdd: boolean = UtilitiesService.isOdd(row + column);\n        const boxCell: Cell = { row, column };\n        const boxPoint: Point = this.getBoxPosition(row, column);\n        const boxPosition: IPosition = { cell: boxCell, point: boxPoint };\n        const box = Box.boxBuilder(isOdd, boxPosition, Board.boxSize);\n\n        if (isOdd) {\n          if (row < 3) {\n            box.buildChecker(playerOne);\n          } else if (row > 4) {\n            box.buildChecker(playerTwo);\n          }\n        }\n        this.state.boxes.set(`${row}${column}`, box);\n      }\n    }\n  }\n\n  removeCheckerFromBoard(box: Box): void {\n    this.decreasePlayersCheckers(box.state.checker as Checker);\n    box.removeChecker();\n  }\n\n  decreasePlayersCheckers(checker: Checker): void {\n    const player = checker.state.player.state.id;\n\n    if (player === 0) {\n      this.state.playerOneCheckersRemaining--;\n    } else {\n      this.state.playerTwoCheckersRemaining--;\n    }\n  }\n\n  getBox(idx: Cell): Box {\n    return this.state.boxes.get(`${idx.row}${idx.column}`);\n  }\n\n  getBoxPosition(row: number, column: number): Point {\n    const x = column * Board.boxSize + this.state.sidePadding;\n    const y = row * Board.boxSize + this.state.topPadding;\n    return { x, y };\n  }\n\n  getBoxIndex(x: number, y: number): Cell {\n    const row = Math.floor((y - this.state.topPadding - 40) / Board.boxSize);\n    const column = Math.floor((x - this.state.sidePadding) / Board.boxSize);\n    return { row, column };\n  }\n\n  getBoxesArray(): Box[] {\n    const boxArray: Box[] = [];\n    for (let row = 0; row < this.state.rows; row++) {\n      for (let column = 0; column < this.state.columns; column++) {\n        boxArray.push(this.state.boxes.get(`${row}${column}`));\n      }\n    }\n    return boxArray;\n  }\n\n  resetAvailableMoves(): void {\n    this.state.availableMoves = [];\n  }\n\n  getAllMoves(box: Box): Box[] {\n    const { isKing, player } = (box.state.checker as Checker).state;\n    const moves: Box[] = [];\n    const { row, column } = box.state.position.cell;\n\n    if (row > 0 && column > 0) {\n      moves.push(this.state.boxes.get(`${row - 1}${column -  1}`));\n    }\n    if (row > 0 && column < this.state.columns - 1) {\n      moves.push(this.state.boxes.get(`${row - 1}${column + 1}`));\n    }\n\n    if (isKing) {\n      if (row < this.state.rows - 1 && column > 0) {\n        moves.push(this.state.boxes.get(`${row + 1}${column - 1}`));\n      }\n      if (row < this.state.rows - 1 && column < this.state.columns - 1) {\n        moves.push(this.state.boxes.get(`${row + 1}${column + 1}`));\n      }\n    }\n\n    return moves;\n  }\n\n  getAvailableMove(box: Box): Move {\n    const idx = this.state.availableMoves.findIndex((move: Move) => {\n      return move.end.state.position.cell === box.state.position.cell;\n    });\n    return this.state.availableMoves[idx];\n  }\n\n  setAvailableMoves(box: Box): void {\n    const allMoves: Box[] = this.getAllMoves(box);\n    this.state.availableMoves = this.filterMoves(box, allMoves);\n  }\n\n  filterMoves(startBox: Box, moves: Box[]): Move[] {\n    const filteredMoves: Move[] = [];\n    const jumpMoves: Move[] = [];\n    const { player } = (startBox.state.checker as Checker).state;\n\n    moves.forEach((move: Box) => {\n\n      if (move.hasChecker()) {\n        const isOpponentChecker: boolean = this.checkIfOpponentChecker(move, player.state.id);\n\n        if (isOpponentChecker) {\n          const isJumpPossible: boolean = this.checkIfJumpIsPossible(startBox.state.position.cell, move.state.position.cell);\n\n          if (isJumpPossible) {\n            const jumpIdx: Cell = this.getJumpPosition(startBox.state.position.cell, move.state.position.cell);\n            const endBox = this.state.boxes.get(`${jumpIdx.row}${jumpIdx.column}`);\n            const jumpMove: Move = { start: startBox, end: endBox, isJump: true, jumpedBox: move };\n            jumpMoves.push(jumpMove);\n          }\n        }\n      } else {\n        filteredMoves.push({ start: startBox, end: move, isJump: false, jumpedBox: null });\n      }\n    });\n\n    return jumpMoves.concat(filteredMoves);\n  }\n\n  checkIfOpponentChecker(move: Box, player: number): boolean {\n    const checker: Checker = (move.state.checker as Checker);\n    return player !== checker.state.player.state.id;\n  }\n\n  checkIfJumpIsPossible(currentIdx: Cell, moveIdx: Cell): boolean {\n\n    const { row, column }: Cell = this.getJumpPosition(currentIdx, moveIdx);\n    if (row < 0 || row >= 8 || column < 0 || column >= 8) { return false; }\n\n    const box: Box = this.state.boxes.get(`${row}${column}`);\n    const isBoxEmpty: boolean = !box.hasChecker();\n    return isBoxEmpty;\n  }\n\n  getJumpPosition(p1: Cell, p2: Cell): Cell {\n    const dx = p1.column - p2.column;\n    const dy = p1.row - p2.row;\n    return { row: p2.row - dy, column: p2.column - dx };\n  }\n\n  checkForWin(player: number): boolean {\n    if (player === 0) {\n      return this.state.playerTwoCheckersRemaining === 0;\n    } else {\n      return this.state.playerOneCheckersRemaining === 0;\n    }\n  }\n\n  checkIfKinged(row: number, checker: Checker) {\n    if (row === 0) {\n      checker.makeKing();\n    }\n  }\n\n  checkForAdditionalJumps(currentMove: Move): boolean {\n    const currentBox: Box = currentMove.end;\n    this.setAvailableMoves(currentBox);\n    const jumpMoves: Move[] = this.state.availableMoves.filter((move: Move) => {\n      return move.isJump;\n    });\n\n    if (jumpMoves.length > 0) {\n      this.state.availableMoves = jumpMoves;\n      this.state.availableMoves.push({start: currentBox, end: currentBox, isJump: false, jumpedBox: null});\n      return true;\n    }\n    return false;\n  }\n\n}\n","import { PlayerState } from '../interfaces/playerState';\n\nexport class Player {\n  state: PlayerState;\n\n  static playerBuilder(order: number, color: string, name?: string): Player {\n    const state: PlayerState = {\n      id: order - 1,\n      name: name ? name : `Player ${order}`,\n      color,\n      numberOfPieces: 16\n    };\n    return new Player(state);\n  }\n\n  constructor(playerState: PlayerState) {\n    this.state = playerState;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CheckersComponent } from './checkers.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CheckersComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CheckersRoutingModule { }\n","import { Component, ElementRef, ViewChild, AfterViewInit, OnInit } from '@angular/core';\nimport { Board } from './objects/board';\nimport { Player } from './objects/player';\nimport { Checker } from './objects/checker';\nimport { Box } from './objects/box';\nimport { Move } from './interfaces/move';\nimport { Point } from '../../shared/interfaces/point';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { IPosition } from '../../shared/interfaces/position';\n\n@Component({\n  selector: 'app-checkers',\n  templateUrl: 'checkers.component.html',\n  styleUrls: ['checkers.component.scss'],\n  animations: [\n    trigger('rotationTrigger', [\n      state('rotated', style({ transform: 'rotate(180deg)' })),\n      state('notRotated', style({ transform: 'rotate(0deg)'})),\n      transition('notRotated => rotated', [\n        animate('2s 50ms ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class CheckersComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('checkers', { static: true })\n  canvas: ElementRef<HTMLCanvasElement>;\n  canvasPadding: number;\n\n  private colors = {\n    playerOne: 'dodgerblue',\n    playerTwo: 'goldenrod'\n  };\n\n  private ctx: CanvasRenderingContext2D;\n  private board: Board;\n  private playerOne: Player;\n  private playerTwo: Player;\n  private currentPlayer: Player;\n  private holdingChecker: boolean;\n  private checkerHeld: Checker;\n  private halfBoxSize: number;\n  private lastBoxClicked: Box;\n  private isPlaying: boolean;\n  private checkerImgPlayerOne: HTMLImageElement;\n  private checkerImgPlayerTwo: HTMLImageElement;\n  private checkerImgKingPlayerOne: HTMLImageElement;\n  private checkerImgKingPlayerTwo: HTMLImageElement;\n  private playerBarWidth: number;\n  canvasRotated: boolean;\n\n  constructor() {}\n\n  ngOnInit() {\n    this.setProperties();\n    this.setInitialState();\n  }\n\n  ngAfterViewInit() {\n    this.getCheckerImageData();\n  }\n\n  // Does not change from game to game\n  setProperties() {\n    this.ctx = this.canvas.nativeElement.getContext('2d');\n    this.canvasPadding = 40;\n  }\n\n  // Changes from game to game\n  setInitialState() {\n\n    this.playerOne = Player.playerBuilder(1, this.colors.playerOne);\n    this.playerTwo = Player.playerBuilder(2, this.colors.playerTwo);\n    this.playerBarWidth = 20;\n    this.currentPlayer = this.playerOne;\n    this.holdingChecker = false;\n    this.isPlaying = true;\n    this.board = Board.boardBuilder([this.playerOne, this.playerTwo]);\n    this.halfBoxSize = Board.boxSize * .5;\n    this.canvasRotated = false;\n  }\n\n  setCanvasDimensions(): void {\n    this.canvas.nativeElement.width = innerWidth;\n    this.canvas.nativeElement.height = innerHeight - this.canvasPadding;\n  }\n\n  async getCheckerImageData(): Promise<void> {\n    const x = this.halfBoxSize;\n    const y = this.halfBoxSize;\n    const checkerRadius = Board.boxSize * 0.46;\n\n    this.canvas.nativeElement.width = Board.boxSize;\n    this.canvas.nativeElement.height = Board.boxSize;\n\n    this.checkerImgPlayerOne = new Image();\n    this.checkerImgPlayerOne.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerOne, false);\n\n    this.checkerImgPlayerTwo = new Image();\n    this.checkerImgPlayerTwo.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerTwo, false);\n\n    this.checkerImgKingPlayerOne = new Image();\n    this.checkerImgKingPlayerOne.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerOne, true);\n\n    this.checkerImgKingPlayerTwo = new Image();\n    this.checkerImgKingPlayerTwo.src = this.drawCheckerImage(x, y, checkerRadius, this.colors.playerTwo, true);\n\n    this.refreshCanvas();\n\n    await this.loadImages([\n      this.checkerImgPlayerOne,\n      this.checkerImgPlayerTwo,\n      this.checkerImgKingPlayerOne,\n      this.checkerImgKingPlayerTwo\n    ]);\n\n    this.setCanvasDimensions();\n    this.draw();\n  }\n\n  async loadImages(images: HTMLImageElement[]) {\n    return new Promise((resolve, reject) => {\n      for (const img of images) {\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n      }\n    });\n  }\n\n  getCheckerCenter(x: number, y: number): Point {\n    x = x - this.halfBoxSize;\n    y = y - 2 * this.halfBoxSize;\n    return { x, y };\n  }\n\n  handleClick(evt: MouseEvent): void {\n\n    if (this.isPlaying) {\n      const boxIdx = this.board.getBoxIndex(evt.clientX, evt.clientY);\n      const box = this.board.getBox(boxIdx);\n\n      if (box) {\n\n        if (this.holdingChecker) {\n          const availableMove: Move = this.board.getAvailableMove(box);\n\n          if (availableMove) {\n            this.placeChecker(availableMove);\n          } else {\n            this.returnChecker();\n          }\n        } else {\n          const hasChecker = box.checkForValidChecker(this.currentPlayer);\n\n          if (hasChecker) {\n            this.board.setAvailableMoves(box);\n\n            const hasAvailableMoves = this.board.state.availableMoves.length > 0;\n\n            if (hasAvailableMoves) { this.pickUpChecker(box); }\n          }\n          this.lastBoxClicked = box;\n        }\n        this.draw();\n      }\n    }\n  }\n\n  handleMouseMove(evt: MouseEvent): void {\n    if (this.holdingChecker) {\n      const checkerCenter: Point = this.getCheckerCenter(evt.clientX, evt.clientY);\n      this.checkerHeld.updatePosition(checkerCenter);\n      this.draw();\n    }\n  }\n\n  pickUpChecker(box: Box): void {\n    this.holdingChecker = true;\n    this.checkerHeld = box.state.checker as Checker;\n    box.removeChecker();\n  }\n\n  placeChecker(move: Move) {\n    const player = this.currentPlayer.state.id;\n    const row = move.end.state.position.cell.row;\n    move.end.addChecker(this.checkerHeld);\n\n    let additionalJumps: boolean;\n\n    if (move.isJump) {\n      this.board.removeCheckerFromBoard(move.jumpedBox);\n      additionalJumps = this.board.checkForAdditionalJumps(move);\n    }\n\n    if (additionalJumps) {\n\n      this.pickUpChecker(move.end);\n\n    } else {\n\n      if (!this.checkerHeld.state.isKing) {\n        this.board.checkIfKinged(row, this.checkerHeld);\n      }\n\n      const isWin = this.board.checkForWin(this.currentPlayer.state.id);\n\n      if (isWin) {\n        this.isPlaying = false;\n        console.log(`Player ${this.currentPlayer.state.id + 1} wins!`);\n      }\n\n      this.changePlayer();\n      this.board.resetAvailableMoves();\n      this.holdingChecker = false;\n      this.checkerHeld = null;\n    }\n  }\n\n  returnChecker() {\n    const { x, y } = this.lastBoxClicked.state.absoluteCenter;\n    const checkerPosition = this.getCheckerCenter(x, y);\n    this.checkerHeld.updatePosition(checkerPosition);\n    this.lastBoxClicked.addChecker(this.checkerHeld);\n    this.board.resetAvailableMoves();\n    this.holdingChecker = false;\n    this.checkerHeld = null;\n  }\n\n  // TODO:\n  changePlayer(): void {\n    this.rotateBoard();\n\n    if (this.currentPlayer.state.id === 0) {\n      this.currentPlayer = this.playerTwo;\n    } else {\n      this.currentPlayer = this.playerOne;\n    }\n  }\n\n  changeCheckerPositions(): void {\n    const complementValue = Board.rows - 1;\n    for (let row = 0; row < Board.rows / 2; row++) {\n      for (let column = 0; column < Board.columns; column++) {\n        const currentBox = this.board.state.boxes.get(`${row}${column}`);\n        if (currentBox.state.checker === Box.unplayableSpace) { continue; }\n\n        let currentChecker: Checker;\n        if (currentBox.hasChecker()) {\n          currentChecker = currentBox.state.checker as Checker;\n          currentBox.removeChecker();\n        }\n\n        const complementBox = this.board.state.boxes.get(`${complementValue - row}${complementValue - column}`);\n        let complementChecker: Checker;\n        if (complementBox.hasChecker()) {\n          complementChecker = complementBox.state.checker as Checker;\n          complementBox.removeChecker();\n        }\n\n        if (complementChecker) { currentBox.addChecker(complementChecker); }\n        if (currentChecker) { complementBox.addChecker(currentChecker); }\n      }\n    }\n  }\n\n  rotateBoard(): void {\n    this.canvasRotated = true;\n\n    setTimeout(() => {\n      this.changeCheckerPositions();\n      this.canvasRotated = false;\n      this.draw();\n    }, 2000);\n  }\n\n  draw(): void {\n    this.refreshCanvas();\n    this.drawPlayerBar();\n    this.drawBackground();\n    this.drawBoard();\n\n    if (this.board.state.availableMoves.length > 0) {\n      this.drawHighlightedSpace();\n      this.drawAvailableMoves();\n    }\n    if (this.holdingChecker) { this.drawChecker(this.checkerHeld); }\n  }\n\n  refreshCanvas() {\n    this.ctx.clearRect(0, 0, innerWidth, innerHeight - (2 * this.canvasPadding));\n  }\n\n  drawPlayerBar() {\n    this.ctx.fillStyle = this.currentPlayer.state.color;\n    this.ctx.fillRect(0, 0, innerWidth, innerHeight - (this.canvasPadding));\n  }\n\n  drawBackground() {\n    const stroke = this.playerBarWidth;\n    const x = stroke;\n    const y = stroke;\n    const w = this.canvas.nativeElement.width - (2 * stroke);\n    const h = this.canvas.nativeElement.height - (2 * stroke);\n\n    this.ctx.fillStyle = 'ivory';\n    this.ctx.fillRect(x, y, w, h);\n  }\n\n  drawBoard() {\n    const boxes = this.board.getBoxesArray();\n\n    boxes.forEach(box => {\n      this.drawBox(box);\n\n      if (box.hasChecker()) {\n        const checker = box.state.checker as Checker;\n        this.drawChecker(checker);\n      }\n    });\n  }\n\n  drawChecker(checker: Checker) {\n\n    const { x, y } = checker.state.position.point;\n\n    if (checker.state.player.state.id === 0) {\n\n      if (checker.state.isKing) {\n        this.ctx.drawImage(this.checkerImgKingPlayerOne, x, y);\n      } else {\n        this.ctx.drawImage(this.checkerImgPlayerOne, x, y);\n      }\n    } else {\n      if (checker.state.isKing) {\n        this.ctx.drawImage(this.checkerImgKingPlayerTwo, x, y);\n      } else {\n        this.ctx.drawImage(this.checkerImgPlayerTwo, x, y);\n      }\n    }\n  }\n\n  drawBox(box: Box) {\n    const { color, width, height } = box.state;\n    const { x, y } = box.state.position.point;\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x, y, width, height);\n\n    this.ctx.lineWidth = 0.5;\n    this.ctx.strokeStyle = 'black';\n    this.ctx.strokeRect(x, y, width, height);\n  }\n\n  drawCheckerImage(x: number, y: number, radius: number, color: string, isKing: boolean) {\n    const color2 = color === this.colors.playerOne ? 'deepskyblue' : 'gold';\n\n    // Outer Circle\n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius, 0, 2 * Math.PI, true);\n    this.ctx.fill();\n\n    // Outer Grooves\n    this.ctx.strokeStyle = color2;\n    this.ctx.lineWidth = Board.boxSize * .05;\n\n    for (let i = 0; i < 2 * Math.PI; i += 0.18) {\n      this.ctx.beginPath();\n      this.ctx.arc(x, y, radius - 4, i, i + 0.04, false);\n      this.ctx.stroke();\n    }\n\n    // Inner Circle\n    this.ctx.fillStyle = color2;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius - 10, 0, 2 * Math.PI, true);\n    this.ctx.fill();\n\n    // Inner Crown\n    if (isKing) {\n      this.ctx.strokeStyle = color;\n      this.ctx.lineWidth = Board.boxSize * .05;\n      const dif = Board.boxSize / 95;\n      this.ctx.beginPath();\n      this.ctx.moveTo(x + 16 * dif, y + 15 * dif);\n      this.ctx.lineTo(x - 15 * dif, y + 15 * dif);\n      this.ctx.lineTo(x - 20 * dif, y - 10 * dif);\n      this.ctx.lineTo(x - 10 * dif, y           );\n      this.ctx.lineTo(x,            y - 20 * dif);\n      this.ctx.lineTo(x + 10 * dif, y           );\n      this.ctx.lineTo(x + 20 * dif, y - 10 * dif);\n      this.ctx.lineTo(x + 15 * dif, y + 15 * dif);\n    }\n\n    this.ctx.stroke();\n\n    return this.canvas.nativeElement.toDataURL('image/webp') as string;\n  }\n\n  drawHighlightedSpace() {\n    const { x, y } = this.lastBoxClicked.state.position.point;\n    const { width, height } = this.lastBoxClicked.state;\n\n    this.ctx.fillStyle = 'white';\n    this.ctx.fillRect(x, y, width, height);\n  }\n\n  drawAvailableMoves() {\n    this.ctx.lineWidth = 6;\n\n    this.board.state.availableMoves.forEach((move: Move) => {\n      const { x, y } = move.end.state.position.point;\n      const { width, height } = move.end.state;\n\n      this.ctx.strokeStyle = 'yellow';\n      this.ctx.strokeRect(x, y, width, height);\n    });\n  }\n}\n","<canvas\n  #checkers\n  [@rotationTrigger]=\"canvasRotated ? 'rotated' : 'notRotated'\"\n  class=\"canvas\"\n  (click)=\"handleClick($event)\"\n  (mousemove)=\"handleMouseMove($event)\">\n</canvas>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { CheckersRoutingModule } from './checkers-routing.module';\n\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { CheckersComponent } from './checkers.component';\n\n@NgModule({\n  declarations: [\n    CheckersComponent\n  ],\n  imports: [\n    SharedModule,\n    CheckersRoutingModule,\n    MatButtonModule\n  ],\n  exports: [\n    CheckersComponent\n  ]\n})\nexport class CheckersModule { }\n"]}